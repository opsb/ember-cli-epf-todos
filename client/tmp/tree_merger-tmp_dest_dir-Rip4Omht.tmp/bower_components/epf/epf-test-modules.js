/*!
 * @overview  Epf - ECMAScript Persistence Framework
 * @copyright Copyright 2014 Gordon L. Hempton and contributors
 * @license   Licensed under MIT license
 *            See https://raw.github.com/getoutreach/epf/master/LICENSE
 * @version   0.3.5
 */
define("epf-test/_setup",
  [],
  function() {
    "use strict";
    Ember.LOG_STACKTRACE_ON_DEPRECATION = false;

    var syncForTest = function(fn) {
      var callSuper;

      if (typeof fn !== "function") { callSuper = true; }

      return function() {
        var override = false, ret;

        if (Ember.run && !Ember.run.currentRunLoop) {
          Ember.run.begin();
          override = true;
        }

        try {
          if (callSuper) {
            ret = this._super.apply(this, arguments);
          } else {
            ret = fn.apply(this, arguments);
          }
        } finally {
          if (override) {
            Ember.run.end();
          }
        }

        return ret;
      };
    };

    Ember.config.overrideAccessors = function() {
      Ember.set = syncForTest(Ember.set);
      Ember.get = syncForTest(Ember.get);
    };

    Ember.config.overrideClassMixin = function(ClassMixin) {
      ClassMixin.reopen({
        create: syncForTest()
      });
    };

    Ember.config.overridePrototypeMixin = function(PrototypeMixin) {
      PrototypeMixin.reopen({
        destroy: syncForTest()
      });
    };

    Ember.RSVP.Promise.prototype.then = syncForTest(Ember.RSVP.Promise.prototype.then);
  });
define("epf-test/active_model/_shared",
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var setup;
    var get$ = Ember.get;
    var set$ = Ember.set;
    setup = function () {
      var TestActiveModelAdapter;
      TestActiveModelAdapter = get$(Ep, 'ActiveModelAdapter').extend({
        h: null,
        r: null,
        init: function () {
          this._super();
          set$(this, 'h', []);
          return set$(this, 'r', {});
        },
        ajax: function (url, type, hash) {
          var adapter;
          adapter = this;
          return new Ember.RSVP.Promise(function (resolve, reject) {
            var json, key;
            key = type + ':' + url;
            get$(adapter, 'h').push(key);
            json = get$(adapter, 'r')[key];
            if (hash && typeof get$(hash, 'data') === 'string')
              set$(hash, 'data', JSON.parse(get$(hash, 'data')));
            if (!json)
              throw 'No data for ' + key;
            if (typeof json === 'function')
              json = json(url, type, hash);
            return adapter.runLater(function () {
              return resolve(json);
            }, 0);
          });
        },
        runLater: function (callback) {
          return Ember.run.later(callback, 0);
        }
      });
      set$(this, 'App', Ember.Namespace.create());
      set$(this, 'container', new Ember.Container);
      Ep.setupContainer(get$(this, 'container'));
      set$(this, 'RestAdapter', TestActiveModelAdapter.extend());
      get$(this, 'container').register('adapter:main', get$(this, 'RestAdapter'));
      set$(this, 'adapter', get$(this, 'container').lookup('adapter:main'));
      set$(this, 'session', get$(this, 'adapter').newSession());
      return set$(this, 'container', get$(get$(this, 'adapter'), 'container'));
    };
    __exports__["default"] = setup;
  });
define("epf-test/active_model/active_model_adapter",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('Ep.ActiveModelAdapter', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        session = get$(this, 'session');
        set$(Ep, '__container__', get$(this, 'container'));
        set$(this, 'MessageThread', get$(Ep, 'Model').extend({ subject: Ep.attr('string') }));
        set$(get$(this, 'App'), 'MessageThread', get$(this, 'MessageThread'));
        return get$(this, 'container').register('model:message_thread', get$(this, 'MessageThread'));
      });
      afterEach(function () {
        return delete Ep.__container__;
      });
      return describe('.pathForType', function () {
        return it('underscores and pluralizes', function () {
          return get$(expect(adapter.pathForType('message_thread')), 'to').eq('message_threads');
        });
      });
    });
  });
define("epf-test/adapter",
  [],
  function() {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    describe('Ep.Adapter', function () {
      beforeEach(function () {
        set$(this, 'container', new Ember.Container);
        Ep.setupContainer(get$(this, 'container'));
        set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
        return set$(this, 'adapter', get$(this, 'container').lookup('adapter:main'));
      });
      return describe('reifyClientId', function () {
        it('sets clientId on new record', function () {
          var post;
          post = get$(this, 'Post').create({ title: 'new post' });
          get$(get$(get$(expect(get$(post, 'clientId')), 'to'), 'be'), 'null');
          get$(this, 'adapter').reifyClientId(post);
          return get$(get$(get$(get$(expect(get$(post, 'clientId')), 'to'), 'not'), 'be'), 'null');
        });
        return it('should set existing clientId on detached model', function () {
          var detached, post;
          post = get$(this, 'Post').create({
            title: 'new post',
            id: '1'
          });
          get$(get$(get$(expect(get$(post, 'clientId')), 'to'), 'be'), 'null');
          get$(this, 'adapter').reifyClientId(post);
          get$(get$(get$(get$(expect(get$(post, 'clientId')), 'to'), 'not'), 'be'), 'null');
          detached = get$(this, 'Post').create({
            title: 'different instance',
            id: '1'
          });
          get$(get$(get$(expect(get$(detached, 'clientId')), 'to'), 'be'), 'null');
          get$(this, 'adapter').reifyClientId(detached);
          return get$(expect(get$(detached, 'clientId')), 'to').eq(get$(post, 'clientId'));
        });
      });
    });
  });
define("epf-test/collections/model_array",
  ["epf/collections/model_array","epf-test/support/schemas"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var ModelArray = __dependency1__["default"];
    var postSchema = __dependency2__.postSchema;
    describe('ModelArray', function () {
      var array;
      array = null;
      beforeEach(function () {
        postSchema.apply(this);
        return array = ModelArray.create({ content: [] });
      });
      describe('removeObject', function () {
        return it('should remove based on `isEqual` equivalence', function () {
          array.addObject(get$(this, 'Post').create({ clientId: '1' }));
          array.removeObject(get$(this, 'Post').create({ clientId: '1' }));
          return get$(expect(get$(array, 'length')), 'to').eq(0);
        });
      });
      describe('.copyTo', function () {
        var dest;
        dest = null;
        beforeEach(function () {
          return dest = ModelArray.create({ content: [] });
        });
        it('should copy objects', function () {
          array.addObjects([
            get$(this, 'Post').create({ clientId: '1' }),
            get$(this, 'Post').create({ clientId: '2' })
          ]);
          array.copyTo(dest);
          return get$(expect(get$(dest, 'length')), 'to').eq(2);
        });
        return it('should remove objects not present in source array', function () {
          array.addObject(get$(this, 'Post').create({ clientId: '1' }));
          dest.addObject(get$(this, 'Post').create({ clientId: '2' }));
          array.copyTo(dest);
          get$(expect(get$(dest, 'length')), 'to').eq(1);
          return get$(expect(get$(dest.objectAt(0), 'clientId')), 'to').eq('1');
        });
      });
      return describe('.load', function () {
        beforeEach(function () {
          get$(this, 'Post').reopen({
            load: function () {
              set$(this, 'loadCalled', true);
              return Ember.RSVP.resolve(this);
            }
          });
          array.pushObject(get$(this, 'Post').create({ id: '1' }));
          return array.pushObject(get$(this, 'Post').create({ id: '2' }));
        });
        return it('should load all models', function () {
          return array.load().then(function () {
            get$(expect(get$(array, 'length')), 'to').eq(2);
            return array.forEach(function (model) {
              return get$(get$(get$(expect(get$(model, 'loadCalled')), 'to'), 'be'), 'true');
            });
          });
        });
      });
    });
  });
define("epf-test/collections/model_set",
  [],
  function() {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    describe('Ep.ModelSet', function () {
      beforeEach(function () {
        set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
        return set$(this, 'set', get$(Ep, 'ModelSet').create());
      });
      it('removes based on isEqual', function () {
        var postA, postB;
        postA = get$(this, 'Post').create({
          id: '1',
          title: 'one',
          clientId: 'post1'
        });
        postB = get$(this, 'Post').create({
          id: '1',
          title: 'one',
          clientId: 'post1'
        });
        get$(get$(expect(postA), 'to'), 'not').eq(postB);
        get$(get$(get$(expect(postA.isEqual(postB)), 'to'), 'be'), 'true');
        get$(this, 'set').add(postA);
        get$(expect(get$(get$(this, 'set'), 'length')), 'to').eq(1);
        get$(this, 'set').remove(postB);
        return get$(expect(get$(get$(this, 'set'), 'length')), 'to').eq(0);
      });
      it('adds based on isEqual and always overwrites', function () {
        var postA, postB;
        postA = get$(this, 'Post').create({
          id: '1',
          title: 'one',
          clientId: 'post1'
        });
        postB = get$(this, 'Post').create({
          id: '1',
          title: 'one',
          clientId: 'post1'
        });
        get$(get$(expect(postA), 'to'), 'not').eq(postB);
        get$(get$(get$(expect(postA.isEqual(postB)), 'to'), 'be'), 'true');
        get$(this, 'set').add(postA);
        get$(expect(get$(get$(this, 'set'), 'length')), 'to').eq(1);
        get$(this, 'set').add(postB);
        get$(expect(get$(get$(this, 'set'), 'length')), 'to').eq(1);
        return get$(expect(get$(this, 'set')[0]), 'to').eq(postB);
      });
      it('copies', function () {
        var copy, copyA, copyB, postA, postB;
        postA = get$(this, 'Post').create({
          id: '1',
          title: 'one',
          clientId: 'post1'
        });
        postB = get$(this, 'Post').create({
          id: '2',
          title: 'two',
          clientId: 'post2'
        });
        get$(this, 'set').add(postA);
        get$(this, 'set').add(postB);
        copy = get$(this, 'set').copy();
        get$(get$(expect(copy), 'to'), 'not').eq(get$(this, 'set'));
        copyA = copy.getModel(postA);
        copyB = copy.getModel(postB);
        get$(expect(copyA), 'to').eq(postA);
        return get$(expect(copyB), 'to').eq(postB);
      });
      it('deep copies', function () {
        var copy, copyA, copyB, postA, postB;
        postA = get$(this, 'Post').create({
          id: '1',
          title: 'one',
          clientId: 'post1'
        });
        postB = get$(this, 'Post').create({
          id: '2',
          title: 'two',
          clientId: 'post2'
        });
        get$(this, 'set').add(postA);
        get$(this, 'set').add(postB);
        copy = get$(this, 'set').copy(true);
        get$(get$(expect(copy), 'to'), 'not').eq(get$(this, 'set'));
        copyA = copy.getModel(postA);
        copyB = copy.getModel(postB);
        get$(get$(expect(copyA), 'to'), 'not').eq(postA);
        get$(get$(expect(copyB), 'to'), 'not').eq(postB);
        get$(get$(get$(expect(copyA.isEqual(postA)), 'to'), 'be'), 'true');
        return get$(get$(get$(expect(copyB.isEqual(postB)), 'to'), 'be'), 'true');
      });
      return context('with model', function () {
        beforeEach(function () {
          set$(this, 'post', get$(this, 'Post').create({
            title: 'test',
            id: '1',
            clientId: 'post1'
          }));
          return get$(this, 'set').add(get$(this, 'post'));
        });
        it('finds via getForClientId', function () {
          return get$(expect(get$(this, 'set').getForClientId('post1')), 'to').eq(get$(this, 'post'));
        });
        it('finds via getModel', function () {
          return get$(expect(get$(this, 'set').getModel(get$(this, 'post'))), 'to').eq(get$(this, 'post'));
        });
        return it('finds via getModel with alternate model', function () {
          var post;
          post = get$(this, 'Post').create({
            title: 'some other',
            id: '1',
            clientId: 'post1'
          });
          return get$(expect(get$(this, 'set').getModel(post)), 'to').eq(get$(this, 'post'));
        });
      });
    });
  });
define("epf-test/merge_strategies/per_field",
  ["epf/setup_container","epf/merge_strategies/per_field","epf/model/model","epf/model/attribute","epf/relationships/belongs_to","epf/relationships/has_many"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setupContainer = __dependency1__["default"];
    var PerField = __dependency2__["default"];
    var Model = __dependency3__["default"];
    var attr = __dependency4__["default"];
    var belongsTo = __dependency5__["default"];
    var hasMany = __dependency6__["default"];
    describe('PerField', function () {
      var App, session;
      session = null;
      App = null;
      beforeEach(function () {
        var adapter;
        App = Ember.Namespace.create();
        set$(this, 'container', new Ember.Container);
        setupContainer(get$(this, 'container'));
        set$(App, 'Comment', Model.extend());
        set$(App, 'User', Model.extend());
        set$(App, 'Post', Model.extend({
          title: attr('string'),
          body: attr('string'),
          comments: hasMany(get$(App, 'Comment')),
          user: belongsTo(get$(App, 'User')),
          createdAt: attr('date')
        }));
        get$(App, 'Comment').reopen({
          body: attr('string'),
          post: belongsTo(get$(App, 'Post'))
        });
        get$(App, 'User').reopen({
          name: attr('string'),
          posts: hasMany(get$(App, 'Post'))
        });
        get$(this, 'container').register('model:post', get$(App, 'Post'));
        get$(this, 'container').register('model:user', get$(App, 'User'));
        get$(this, 'container').register('model:comment', get$(App, 'Comment'));
        adapter = get$(this, 'container').lookup('adapter:main');
        return session = adapter.newSession();
      });
      it('keeps modified fields from both versions', function () {
        var post;
        post = session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'titleA',
          body: 'bodyA',
          createdAt: new Date(1985, 7, 22)
        }));
        set$(post, 'title', 'titleB');
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'titleA',
          body: 'bodyB',
          createdAt: null,
          comments: []
        }));
        get$(expect(get$(post, 'title')), 'to').eq('titleB');
        get$(expect(get$(post, 'body')), 'to').eq('bodyB');
        get$(get$(get$(expect(get$(post, 'createdAt')), 'to'), 'be'), 'null');
        get$(post, 'comments').addObject(session.create('comment'));
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'titleB',
          body: 'bodyB',
          user: get$(App, 'User').create({
            id: '2',
            posts: [get$(App, 'Post').create({ id: '1' })]
          })
        }));
        get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
        get$(get$(get$(expect(get$(get$(get$(post, 'comments'), 'firstObject'), 'id')), 'to'), 'be'), 'null');
        return get$(expect(get$(get$(post, 'user'), 'id')), 'to').eq('2');
      });
      it('keeps ours if same field modified in both versions', function () {
        var post;
        post = session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'titleA',
          body: 'bodyA'
        }));
        set$(post, 'title', 'titleB');
        set$(post, 'body', 'bodyB');
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'titleC',
          body: 'bodyC',
          user: null,
          comments: []
        }));
        get$(expect(get$(post, 'title')), 'to').eq('titleB');
        get$(expect(get$(post, 'body')), 'to').eq('bodyB');
        get$(post, 'comments').addObject(get$(App, 'Comment').create());
        set$(post, 'user', get$(App, 'User').create());
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'titleB',
          body: 'bodyB',
          user: get$(App, 'User').create({ id: '2' }),
          comments: [get$(App, 'Comment').create({ id: '3' })]
        }));
        get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
        get$(get$(get$(expect(get$(get$(get$(post, 'comments'), 'firstObject'), 'id')), 'to'), 'be'), 'null');
        return get$(get$(get$(expect(get$(get$(post, 'user'), 'id')), 'to'), 'be'), 'null');
      });
      it('keeps ours if only modified in ours', function () {
        var newData, post;
        post = session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'titleA',
          body: 'bodyA',
          user: get$(App, 'User').create({
            id: '2',
            posts: [get$(App, 'Post').create({ id: '1' })]
          }),
          comments: [get$(App, 'Comment').create({
              id: '3',
              user: get$(App, 'User').create({ id: '2' }),
              post: get$(App, 'Post').create({ id: '1' })
            })]
        }));
        session.create(get$(App, 'Comment'), { post: post });
        get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(2);
        newData = get$(App, 'Post').create({
          id: '1',
          title: 'titleA',
          body: 'bodyA',
          user: get$(App, 'User').create({
            id: '2',
            posts: [get$(App, 'Post').create({ id: '1' })]
          }),
          comments: [get$(App, 'Comment').create({
              id: '3',
              user: get$(App, 'User').create({ id: '2' }),
              post: get$(App, 'Post').create({ id: '1' })
            })]
        });
        set$(get$(get$(newData, 'comments'), 'firstObject'), 'post', newData);
        session.merge(newData);
        return get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(2);
      });
      it('still merges model if removed from belongsTo in ours', function () {
        var post, user;
        post = session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'herp',
          user: get$(App, 'User').create({
            id: '2',
            posts: [get$(App, 'Post').create({ id: '1' })]
          })
        }));
        user = get$(post, 'user');
        set$(post, 'user', null);
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'herp',
          user: get$(App, 'User').create({
            id: '2',
            name: 'grodon',
            posts: [get$(App, 'Post').create({ id: '1' })]
          })
        }));
        get$(get$(get$(expect(get$(post, 'user')), 'to'), 'be'), 'null');
        return get$(expect(get$(user, 'name')), 'to').eq('grodon');
      });
      it('still merges model if removed from hasMany in ours', function () {
        var comment, post;
        post = session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'herp',
          comments: [get$(App, 'Comment').create({
              id: '2',
              body: 'herp',
              post: get$(App, 'Post').create({ id: '1' })
            })]
        }));
        comment = get$(get$(post, 'comments'), 'firstObject');
        get$(post, 'comments').clear();
        get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'herp',
          comments: [get$(App, 'Comment').create({
              id: '2',
              body: 'derp',
              post: get$(App, 'Post').create({ id: '1' })
            })]
        }));
        get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
        return get$(expect(get$(comment, 'body')), 'to').eq('derp');
      });
      it('still merges model if sibling added to hasMany', function () {
        var comment, post;
        post = session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'herp',
          comments: [get$(App, 'Comment').create({
              id: '2',
              body: 'herp',
              post: get$(App, 'Post').create({ id: '1' })
            })]
        }));
        get$(post, 'comments').addObject(session.create(get$(App, 'Comment'), { body: 'derp' }));
        comment = get$(get$(post, 'comments'), 'firstObject');
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'herp',
          comments: [get$(App, 'Comment').create({
              id: '2',
              body: 'derp?',
              post: get$(App, 'Post').create({ id: '1' })
            })]
        }));
        get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(2);
        return get$(expect(get$(comment, 'body')), 'to').eq('derp?');
      });
      return it('will preserve local updates after multiple merges', function () {
        var post;
        post = session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'A'
        }));
        set$(post, 'title', 'B');
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'C'
        }));
        get$(expect(get$(post, 'title')), 'to').eq('B');
        session.merge(get$(App, 'Post').create({
          id: '1',
          title: 'C'
        }));
        return get$(expect(get$(post, 'title')), 'to').eq('B');
      });
    });
  });
define("epf-test/model/debug",
  [],
  function() {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    describe('Debug', function () {
      var App, session;
      App = null;
      session = null;
      beforeEach(function () {
        var adapter;
        App = Ember.Namespace.create();
        set$(this, 'container', new Ember.Container);
        Ep.setupContainer(get$(this, 'container'));
        set$(App, 'User', get$(Ep, 'Model').extend({ name: Ep.attr('string') }));
        set$(App, 'Post', get$(Ep, 'Model').extend({
          title: Ep.attr('string'),
          body: Ep.attr('string'),
          user: Ep.belongsTo(get$(App, 'User'))
        }));
        set$(App, 'Comment', get$(Ep, 'Model').extend({
          body: Ep.attr('string'),
          post: Ep.belongsTo(get$(App, 'Post'))
        }));
        get$(App, 'Post').reopen({ comments: Ep.hasMany(get$(App, 'Comment')) });
        get$(App, 'User').reopen({ posts: Ep.hasMany(get$(App, 'Post')) });
        get$(this, 'container').register('model:user', get$(App, 'User'));
        get$(this, 'container').register('model:post', get$(App, 'Post'));
        get$(this, 'container').register('model:comment', get$(App, 'Comment'));
        adapter = get$(this, 'container').lookup('adapter:main');
        return session = adapter.newSession();
      });
      it('flags relationship CPs as expensive', function () {
        var post, propertyInfo;
        post = session.create('post');
        propertyInfo = get$(post._debugInfo(), 'propertyInfo');
        return get$(get$(expect(get$(propertyInfo, 'expensiveProperties')), 'to'), 'have').members([
          'user',
          'comments'
        ]);
      });
      return it('groups attributes and relationships correctly', function () {
        var groups, post;
        post = session.create('post');
        groups = get$(get$(post._debugInfo(), 'propertyInfo'), 'groups');
        get$(expect(get$(groups, 'length')), 'to').eq(4);
        get$(get$(expect(get$(groups[0], 'properties')), 'to'), 'have').members([
          'id',
          'title',
          'body'
        ]);
        get$(get$(expect(get$(groups[1], 'properties')), 'to'), 'deep').eq(['user']);
        return get$(get$(expect(get$(groups[2], 'properties')), 'to'), 'deep').eq(['comments']);
      });
    });
  });
define("epf-test/model/errors",
  [],
  function() {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    describe('Ep.Errors', function () {
      return describe('forEach', function () {
        it('should iterate over field errors', function () {
          var count, errors;
          errors = get$(Ep, 'Errors').create({ content: { title: ['is too short'] } });
          count = 0;
          errors.forEach(function (key, fieldErrors) {
            get$(expect(key), 'to').eq('title');
            get$(expect(fieldErrors), 'to').eql(['is too short']);
            return count++;
          });
          return get$(expect(count), 'to').eq(1);
        });
        return it('should not error if no content specified', function () {
          var count, errors;
          errors = get$(Ep, 'Errors').create();
          count = 0;
          errors.forEach(function (key, errors) {
            return count++;
          });
          return get$(expect(count), 'to').eq(0);
        });
      });
    });
  });
define("epf-test/model/model",
  [],
  function() {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    describe('Ep.Model', function () {
      var App, session;
      App = null;
      session = null;
      beforeEach(function () {
        App = Ember.Namespace.create();
        set$(App, 'User', get$(Ep, 'Model').extend({
          name: Ep.attr('string'),
          raw: Ep.attr(),
          createdAt: Ep.attr('date')
        }));
        set$(this, 'container', new Ember.Container);
        Ep.setupContainer(get$(this, 'container'));
        get$(this, 'container').register('model:user', get$(App, 'User'));
        session = get$(this, 'container').lookup('session:main');
        return set$(Ep, '__container__', get$(this, 'container'));
      });
      afterEach(function () {
        return delete Ep.__container__;
      });
      describe('.isDirty', function () {
        it('returns false when detached', function () {
          return get$(get$(get$(expect(get$(get$(App, 'User').create(), 'isDirty')), 'to'), 'be'), 'false');
        });
        it('returns true when dirty', function () {
          var user;
          user = null;
          session.reopen({
            dirtyModels: Ember.computed(function () {
              return get$(Ep, 'ModelSet').fromArray([user]);
            }).property()
          });
          user = get$(App, 'User').create();
          set$(user, 'session', session);
          return get$(get$(get$(expect(get$(user, 'isDirty')), 'to'), 'be'), 'true');
        });
        it('returns false when untouched', function () {
          var user;
          user = null;
          session.reopen({
            dirtyModels: Ember.computed(function () {
              return get$(Ep, 'ModelSet').create();
            }).property()
          });
          user = get$(App, 'User').create();
          set$(user, 'session', session);
          return get$(get$(get$(expect(get$(user, 'isDirty')), 'to'), 'be'), 'false');
        });
        return it('is observable', function () {
          var observerHit, user;
          user = session.merge(get$(App, 'User').create({
            id: '1',
            name: 'Wes'
          }));
          get$(get$(get$(expect(get$(user, 'isDirty')), 'to'), 'be'), 'false');
          observerHit = false;
          Ember.addObserver(user, 'isDirty', function () {
            get$(get$(get$(expect(get$(user, 'isDirty')), 'to'), 'be'), 'true');
            return observerHit = true;
          });
          set$(user, 'name', 'Brogrammer');
          get$(get$(get$(expect(get$(user, 'isDirty')), 'to'), 'be'), 'true');
          return get$(get$(get$(expect(observerHit), 'to'), 'be'), 'true');
        });
      });
      it('can use .find', function () {
        session.reopen({
          find: function (type, id) {
            get$(expect(type), 'to').eq(get$(App, 'User'));
            get$(expect(id), 'to').eq(1);
            return Ember.RSVP.resolve(type.create({ id: id.toString() }));
          }
        });
        return get$(App, 'User').find(1).then(function (user) {
          return get$(expect(get$(user, 'id')), 'to').eq('1');
        });
      });
      describe('typeKey class var', function () {
        it('works with global Ember', function () {
          var typeKey;
          set$(App, 'SomeThing', get$(Ep, 'Model').extend());
          typeKey = Ember.get(get$(App, 'SomeThing'), 'typeKey');
          return get$(expect(typeKey), 'to').eq('some_thing');
        });
        return it('works with modular Ember', function () {
          var SomeThing, typeKey;
          SomeThing = get$(Ep, 'Model').extend();
          set$(SomeThing, '_toString', 'my-app@model:some-thing:');
          typeKey = Ember.get(SomeThing, 'typeKey');
          return get$(expect(typeKey), 'to').eq('some_thing');
        });
      });
      describe('.diff', function () {
        it('detects differences in complex object attributes', function () {
          var left, right;
          left = get$(App, 'User').create({ raw: { test: 'a' } });
          right = get$(App, 'User').create({ raw: { test: 'b' } });
          return get$(expect(left.diff(right)), 'to').eql([{
              type: 'attr',
              name: 'raw'
            }]);
        });
        return it('detects no difference in complex object attributes', function () {
          var left, right;
          left = get$(App, 'User').create({ raw: { test: 'a' } });
          right = get$(App, 'User').create({ raw: { test: 'a' } });
          return get$(expect(left.diff(right)), 'to').eql([]);
        });
      });
      return describe('.copy', function () {
        it('copies dates', function () {
          var copy, date, user;
          date = new Date(2014, 7, 22);
          user = get$(App, 'User').create({ createdAt: date });
          copy = user.copy();
          return get$(expect(get$(user, 'createdAt').getTime()), 'to').eq(get$(copy, 'createdAt').getTime());
        });
        it('deep copies complex object attributes', function () {
          var copy, user;
          user = get$(App, 'User').create({ raw: { test: { value: 'a' } } });
          copy = user.copy();
          get$(get$(expect(user), 'to'), 'not').eq(copy);
          get$(get$(expect(get$(user, 'raw')), 'to'), 'not').eq(get$(copy, 'raw'));
          get$(get$(expect(get$(get$(user, 'raw'), 'test')), 'to'), 'not').eq(get$(get$(copy, 'raw'), 'test'));
          return get$(expect(get$(user, 'raw')), 'to').eql(get$(copy, 'raw'));
        });
        return it('deep copies array attributes', function () {
          var copy, user;
          user = get$(App, 'User').create({
            raw: [
              'a',
              'b',
              'c'
            ]
          });
          copy = user.copy();
          get$(get$(expect(user), 'to'), 'not').eq(copy);
          get$(get$(expect(get$(user, 'raw')), 'to'), 'not').eq(get$(copy, 'raw'));
          return get$(expect(get$(user, 'raw')), 'to').eql(get$(copy, 'raw'));
        });
      });
    });
  });
define("epf-test/relationships",
  ["epf/setup_container","epf/model/model","epf/model/attribute","epf/relationships/belongs_to","epf/relationships/has_many"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setupContainer = __dependency1__["default"];
    var Model = __dependency2__["default"];
    var attr = __dependency3__["default"];
    var belongsTo = __dependency4__["default"];
    var hasMany = __dependency5__["default"];
    describe('relationships', function () {
      beforeEach(function () {
        set$(this, 'App', Ember.Namespace.create());
        set$(this, 'container', new Ember.Container);
        setupContainer(get$(this, 'container'));
        set$(this, 'adapter', get$(this, 'container').lookup('adapter:main'));
        return set$(this, 'session', get$(this, 'adapter').newSession());
      });
      context('one->many', function () {
        beforeEach(function () {
          set$(this, 'User', Model.extend({ name: attr('string') }));
          set$(this, 'Post', Model.extend({
            title: attr('string'),
            user: belongsTo(get$(this, 'User'))
          }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'Comment', Model.extend({
            text: attr('string'),
            post: belongsTo(get$(this, 'Post'))
          }));
          set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
          get$(this, 'Post').reopen({ comments: hasMany(get$(this, 'Comment')) });
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        });
        it('belongsTo updates inverse', function () {
          var comment, post;
          post = get$(this, 'session').create('post');
          comment = get$(this, 'session').create('comment');
          set$(comment, 'post', post);
          get$(expect(get$(post, 'comments').toArray()), 'to').eql([comment]);
          set$(comment, 'post', null);
          return get$(expect(get$(post, 'comments').toArray()), 'to').eql([]);
        });
        it('belongsTo updates inverse on delete', function () {
          var comment, post;
          post = get$(this, 'session').create('post');
          comment = get$(this, 'session').create('comment');
          set$(comment, 'post', post);
          get$(expect(get$(post, 'comments').toArray()), 'to').eql([comment]);
          get$(this, 'session').deleteModel(comment);
          return get$(expect(get$(post, 'comments').toArray()), 'to').eql([]);
        });
        it('belongsTo updates inverse on delete when initially added unloaded', function () {
          var comment, post, unloadedComment;
          post = get$(this, 'session').merge(get$(this, 'session').build('post', {
            id: 1,
            comments: [get$(this, 'Comment').create({ id: 2 })]
          }));
          unloadedComment = get$(get$(post, 'comments'), 'firstObject');
          comment = get$(this, 'session').merge(get$(this, 'session').build('comment', {
            id: 2,
            post: get$(this, 'Post').create({ id: 1 })
          }));
          set$(unloadedComment, 'post', post);
          get$(expect(get$(post, 'comments').toArray()), 'to').eql([unloadedComment]);
          get$(this, 'session').deleteModel(unloadedComment);
          return get$(expect(get$(post, 'comments').toArray()), 'to').eql([]);
        });
        it('belongsTo updates inverse when set during create', function () {
          var comment, post;
          comment = get$(this, 'session').create('comment', { post: get$(this, 'session').create('post') });
          post = get$(comment, 'post');
          get$(expect(get$(post, 'comments').toArray()), 'to').eql([comment]);
          set$(comment, 'post', null);
          return get$(expect(get$(post, 'comments').toArray()), 'to').eql([]);
        });
        it('belongsTo adds object to session', function () {
          var comment, post;
          post = get$(this, 'session').merge(get$(this, 'Post').create({ id: '1' }));
          comment = get$(this, 'session').merge(get$(this, 'Comment').create({ id: '2' }));
          set$(comment, 'post', get$(this, 'Post').create({ id: '1' }));
          return get$(expect(get$(comment, 'post')), 'to').eq(post);
        });
        it('hasMany updates inverse', function () {
          var comment, post;
          post = get$(this, 'session').create('post');
          comment = get$(this, 'session').create('comment');
          get$(post, 'comments').addObject(comment);
          get$(expect(get$(comment, 'post')), 'to').eq(post);
          get$(post, 'comments').removeObject(comment);
          return get$(get$(get$(expect(get$(comment, 'post')), 'to'), 'be'), 'null');
        });
        it('hasMany updates inverse on delete', function () {
          var comment, post;
          post = get$(this, 'session').create('post');
          comment = get$(this, 'session').create('comment');
          get$(post, 'comments').addObject(comment);
          get$(expect(get$(comment, 'post')), 'to').eq(post);
          get$(this, 'session').deleteModel(post);
          return get$(get$(get$(expect(get$(comment, 'post')), 'to'), 'be'), 'null');
        });
        it('hasMany updates inverse on create', function () {
          var comment, post;
          post = get$(this, 'session').create('post', { comments: [] });
          comment = get$(this, 'session').create('comment');
          get$(post, 'comments').addObject(comment);
          get$(expect(get$(comment, 'post')), 'to').eq(post);
          get$(this, 'session').deleteModel(post);
          return get$(get$(get$(expect(get$(comment, 'post')), 'to'), 'be'), 'null');
        });
        it('hasMany adds to session', function () {
          var comment, post;
          post = get$(this, 'session').merge(get$(this, 'Post').create({
            id: '1',
            comments: []
          }));
          comment = get$(this, 'session').merge(get$(this, 'Comment').create({
            id: '2',
            post: null
          }));
          get$(post, 'comments').addObject(get$(this, 'Comment').create({ id: '2' }));
          return get$(expect(get$(get$(post, 'comments'), 'firstObject')), 'to').eq(comment);
        });
        it('hasMany content can be set directly', function () {
          var post;
          post = get$(this, 'session').create('post', { comments: [get$(this, 'Comment').create({ id: '2' })] });
          get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
          return get$(expect(get$(get$(get$(post, 'comments'), 'firstObject'), 'id')), 'to').eq('2');
        });
        it('supports watching belongsTo properties that have a detached cached value', function () {
          var comment, deferred;
          deferred = Ember.RSVP.defer();
          set$(get$(this, 'session'), 'loadModel', function (model) {
            Ember.unwatchPath(comment, 'post.title');
            return deferred.resolve();
          });
          comment = get$(this, 'session').adopt(get$(this, 'session').build('comment', {
            id: 2,
            post: get$(this, 'Post').create({ id: 1 })
          }));
          Ember.run(function () {
            return Ember.watchPath(comment, 'post.title');
          });
          return get$(deferred, 'promise');
        });
        return it('supports watching multiple levels of unloaded belongsTo', function () {
          var comment, deferred, Post, User;
          deferred = Ember.RSVP.defer();
          Post = get$(this, 'Post');
          User = get$(this, 'User');
          set$(get$(this, 'session'), 'loadModel', function (model) {
            if (model instanceof Post) {
              model = model.copy();
              set$(model, 'title', 'post');
              set$(model, 'user', User.create({ id: '2' }));
              this.merge(model);
              return Ember.RSVP.resolve(model);
            } else {
              return deferred.resolve();
            }
          });
          comment = get$(this, 'session').adopt(get$(this, 'session').build('comment', {
            id: 2,
            post: get$(this, 'Post').create({ id: 1 })
          }));
          Ember.run(function () {
            return Ember.watchPath(comment, 'post.user.name');
          });
          return get$(deferred, 'promise').then(function () {
            return Ember.unwatchPath(comment, 'post.user.name');
          });
        });
      });
      context('one->one', function () {
        beforeEach(function () {
          set$(this, 'Post', Model.extend({ title: attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'User', Model.extend({
            name: attr('string'),
            post: belongsTo(get$(this, 'Post'))
          }));
          set$(get$(this, 'App'), 'User', get$(this, 'User'));
          get$(this, 'Post').reopen({ user: belongsTo(get$(this, 'User')) });
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:user', get$(this, 'User'));
        });
        it('updates inverse', function () {
          var post, user;
          post = get$(this, 'session').create('post');
          user = get$(this, 'session').create('user');
          set$(post, 'user', user);
          get$(expect(get$(user, 'post')), 'to').eq(post);
          set$(post, 'user', null);
          return get$(get$(get$(expect(get$(user, 'post')), 'to'), 'be'), 'null');
        });
        return it('updates inverse on delete', function () {
          var post, user;
          post = get$(this, 'session').create('post');
          user = get$(this, 'session').create('user');
          set$(post, 'user', user);
          get$(expect(get$(user, 'post')), 'to').eq(post);
          get$(this, 'session').deleteModel(post);
          return get$(get$(get$(expect(get$(user, 'post')), 'to'), 'be'), 'null');
        });
      });
      return context('multiple one->many', function () {
        beforeEach(function () {
          set$(this, 'Group', Model.extend({ name: attr('string') }));
          set$(get$(this, 'App'), 'Group', get$(this, 'Group'));
          set$(this, 'Member', Model.extend({
            role: attr('string'),
            group: belongsTo(get$(this, 'Group'))
          }));
          set$(get$(this, 'App'), 'Member', get$(this, 'Member'));
          set$(this, 'User', Model.extend({
            name: attr('string'),
            groups: hasMany(get$(this, 'Group')),
            members: hasMany(get$(this, 'Member'))
          }));
          set$(get$(this, 'App'), 'User', get$(this, 'User'));
          get$(this, 'Group').reopen({
            members: hasMany(get$(this, 'Member')),
            user: belongsTo(get$(this, 'User'))
          });
          get$(this, 'Member').reopen({ user: belongsTo(get$(this, 'User')) });
          get$(this, 'container').register('model:group', get$(this, 'Group'));
          get$(this, 'container').register('model:member', get$(this, 'Member'));
          return get$(this, 'container').register('model:user', get$(this, 'User'));
        });
        return it('updates inverse on delete', function () {
          var group, member, user;
          group = get$(this, 'session').create('group');
          user = get$(this, 'session').create('user');
          member = get$(this, 'session').create('member', {
            group: group,
            user: user
          });
          get$(expect(get$(member, 'user')), 'to').eq(user);
          get$(expect(get$(member, 'group')), 'to').eq(group);
          get$(expect(get$(user, 'members').toArray()), 'to').eql([member]);
          get$(expect(get$(group, 'members').toArray()), 'to').eql([member]);
          get$(this, 'session').deleteModel(member);
          get$(expect(get$(user, 'members').toArray()), 'to').eql([]);
          return get$(expect(get$(group, 'members').toArray()), 'to').eql([]);
        });
      });
    });
  });
define("epf-test/rest/_shared",
  ["exports"],
  function(__exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var setup;
    var get$ = Ember.get;
    var set$ = Ember.set;
    setup = function () {
      var TestRestAdapter;
      TestRestAdapter = get$(Ep, 'RestAdapter').extend({
        h: null,
        r: null,
        init: function () {
          this._super();
          set$(this, 'h', []);
          return set$(this, 'r', {});
        },
        ajax: function (url, type, hash) {
          var adapter;
          adapter = this;
          return new Ember.RSVP.Promise(function (resolve, reject) {
            var json, key;
            key = type + ':' + url;
            get$(adapter, 'h').push(key);
            json = get$(adapter, 'r')[key];
            if (hash && typeof get$(hash, 'data') === 'string')
              set$(hash, 'data', JSON.parse(get$(hash, 'data')));
            if (!json)
              throw 'No data for ' + key;
            if (typeof json === 'function')
              json = json(url, type, hash);
            return adapter.runLater(function () {
              return resolve(json);
            }, 0);
          });
        },
        runLater: function (callback) {
          return Ember.run.later(callback, 0);
        }
      });
      set$(this, 'App', Ember.Namespace.create());
      set$(this, 'container', new Ember.Container);
      Ep.setupContainer(get$(this, 'container'));
      set$(this, 'RestAdapter', TestRestAdapter.extend());
      get$(this, 'container').register('adapter:main', get$(this, 'RestAdapter'));
      set$(this, 'adapter', get$(this, 'container').lookup('adapter:main'));
      set$(this, 'session', get$(this, 'adapter').newSession());
      return set$(this, 'container', get$(get$(this, 'adapter'), 'container'));
    };
    __exports__["default"] = setup;
  });
define("epf-test/rest/embedded_manager",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('Ep.EmbeddedManager', function () {
      var adapter, manager, session;
      adapter = null;
      session = null;
      manager = null;
      beforeEach(function () {
        var PostSerializer;
        setup.apply(this);
        adapter = get$(this, 'adapter');
        session = get$(this, 'session');
        set$(Ep, '__container__', get$(this, 'container'));
        set$(this, 'App', Ember.Namespace.create());
        set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
        set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
        get$(this, 'container').register('model:post', get$(this, 'Post'));
        set$(this, 'Comment', get$(Ep, 'Model').extend({
          message: Ep.attr('string'),
          post: Ep.belongsTo(get$(this, 'Post'))
        }));
        set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
        get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        get$(this, 'Post').reopen({ comments: Ep.hasMany(get$(this, 'Comment')) });
        PostSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { comments: { embedded: 'always' } } });
        get$(this, 'container').register('serializer:post', PostSerializer);
        return manager = get$(adapter, '_embeddedManager');
      });
      return it('can determine if a record is embedded', function () {
        set$(this, 'post', get$(this, 'Post').create({ id: 1 }));
        set$(this, 'comment', get$(this, 'Comment').create({ id: 2 }));
        get$(get$(get$(expect(manager.isEmbedded(get$(this, 'post'))), 'to'), 'be'), 'false');
        return get$(get$(get$(expect(manager.isEmbedded(get$(this, 'comment'))), 'to'), 'be'), 'true');
      });
    });
  });
define("epf-test/rest/rest.acceptance",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        session = get$(this, 'session');
        return set$(Ep, '__container__', get$(this, 'container'));
      });
      afterEach(function () {
        return delete Ep.__container__;
      });
      describe('managing groups with embedded members', function () {
        beforeEach(function () {
          var GroupSerializer;
          set$(this, 'Group', get$(Ep, 'Model').extend({ name: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Group', get$(this, 'Group'));
          set$(this, 'Member', get$(Ep, 'Model').extend({
            role: Ep.attr('string'),
            group: Ep.belongsTo(get$(this, 'Group'))
          }));
          set$(get$(this, 'App'), 'Member', get$(this, 'Member'));
          set$(this, 'User', get$(Ep, 'Model').extend({
            name: Ep.attr('string'),
            groups: Ep.hasMany(get$(this, 'Group')),
            members: Ep.hasMany(get$(this, 'Member'))
          }));
          set$(get$(this, 'App'), 'User', get$(this, 'User'));
          get$(this, 'Group').reopen({
            members: Ep.hasMany(get$(this, 'Member')),
            user: Ep.belongsTo(get$(this, 'User'))
          });
          get$(this, 'Member').reopen({ user: Ep.belongsTo(get$(this, 'User')) });
          get$(this, 'container').register('model:group', get$(this, 'Group'));
          get$(this, 'container').register('model:member', get$(this, 'Member'));
          get$(this, 'container').register('model:user', get$(this, 'User'));
          GroupSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { members: { embedded: 'always' } } });
          return get$(this, 'container').register('serializer:group', GroupSerializer);
        });
        it('creates new group and then deletes a member', function () {
          var childSession, group, member, user;
          set$(get$(adapter, 'r'), 'POST:/users', function () {
            return {
              users: {
                client_id: get$(user, 'clientId'),
                id: 1,
                name: 'wes'
              }
            };
          });
          set$(get$(adapter, 'r'), 'POST:/groups', function (url, type, hash) {
            get$(expect(get$(get$(get$(get$(hash, 'data'), 'group'), 'members')[0], 'role')), 'to').eq('chief');
            return {
              groups: {
                client_id: get$(group, 'clientId'),
                id: 2,
                name: 'brogrammers',
                members: [{
                    client_id: get$(member, 'clientId'),
                    id: 3,
                    role: 'chief',
                    group: 2,
                    user: 1
                  }],
                user: 1
              }
            };
          });
          childSession = session.newSession();
          user = childSession.create('user', { name: 'wes' });
          group = null;
          member = null;
          return childSession.flushIntoParent().then(function () {
            get$(get$(get$(get$(expect(get$(user, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/users']);
            childSession = session.newSession();
            user = childSession.add(user);
            group = childSession.create('group', {
              name: 'brogrammers',
              user: user
            });
            member = childSession.create('member', {
              role: 'chief',
              user: user,
              group: group
            });
            return childSession.flushIntoParent().then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql([
                'POST:/users',
                'POST:/groups'
              ]);
              get$(get$(get$(get$(expect(get$(user, 'id')), 'to'), 'not'), 'be'), 'null');
              get$(get$(get$(get$(expect(get$(group, 'id')), 'to'), 'not'), 'be'), 'null');
              get$(expect(get$(get$(group, 'members'), 'length')), 'to').eq(1);
              get$(expect(get$(get$(user, 'groups'), 'length')), 'to').eq(1);
              get$(expect(get$(get$(user, 'members'), 'length')), 'to').eq(1);
              get$(get$(get$(get$(expect(get$(member, 'id')), 'to'), 'not'), 'be'), 'null');
              childSession = session.newSession();
              member = childSession.add(member);
              user = childSession.add(user);
              group = childSession.add(group);
              childSession.deleteModel(member);
              get$(expect(get$(get$(user, 'members'), 'length')), 'to').eq(0);
              get$(expect(get$(get$(group, 'members'), 'length')), 'to').eq(0);
              get$(expect(get$(get$(user, 'groups'), 'length')), 'to').eq(1);
              set$(get$(adapter, 'r'), 'PUT:/groups/2', function () {
                return {
                  groups: {
                    client_id: get$(group, 'clientId'),
                    id: 2,
                    name: 'brogrammers',
                    members: [],
                    user: 1
                  }
                };
              });
              return childSession.flushIntoParent().then(function () {
                get$(get$(get$(expect(member.get('isDeleted')), 'to'), 'be'), 'true');
                get$(expect(get$(get$(group, 'members'), 'length')), 'to').eq(0);
                get$(expect(get$(get$(user, 'members'), 'length')), 'to').eq(0);
                get$(expect(get$(get$(user, 'groups'), 'length')), 'to').eq(1);
                return get$(expect(get$(adapter, 'h')), 'to').eql([
                  'POST:/users',
                  'POST:/groups',
                  'PUT:/groups/2'
                ]);
              });
            });
          });
        });
        it("doesn't choke when loading a group without a members key", function () {
          set$(get$(adapter, 'r'), 'GET:/groups', {
            groups: [{
                client_id: null,
                id: '1',
                name: 'brogrammers',
                user: '1'
              }]
          });
          return session.query('group').then(function (result) {
            get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/groups']);
            get$(expect(get$(result, 'length')), 'to').eq(1);
            get$(expect(get$(get$(result, 'firstObject'), 'name')), 'to').eq('brogrammers');
            return get$(get$(get$(expect(get$(get$(result, 'firstObject'), 'groups')), 'to'), 'be'), 'undefined');
          });
        });
        return it('adds a member to an existing group', function () {
          set$(get$(adapter, 'r'), 'GET:/groups/1', function () {
            return {
              groups: {
                id: 1,
                name: 'employees',
                members: [{
                    id: 2,
                    name: 'kinz',
                    group: 1,
                    user: 3
                  }]
              },
              users: {
                id: 3,
                name: 'wtf',
                members: [2],
                groups: [1]
              }
            };
          });
          return session.load('group', 1).then(function (group) {
            var childGroup, childSession, existingMember, member, promise;
            get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/groups/1']);
            childSession = session.newSession();
            childGroup = childSession.add(group);
            existingMember = get$(get$(childGroup, 'members'), 'firstObject');
            get$(get$(get$(get$(expect(get$(existingMember, 'user')), 'to'), 'not'), 'be'), 'null');
            get$(get$(get$(expect(get$(get$(existingMember, 'user'), 'isDetached')), 'to'), 'be'), 'false');
            member = childSession.create('member', { name: 'mollie' });
            get$(childGroup, 'members').addObject(member);
            get$(expect(get$(get$(childGroup, 'members'), 'length')), 'to').eq(2);
            get$(expect(get$(get$(group, 'members'), 'length')), 'to').eq(1);
            set$(get$(adapter, 'r'), 'PUT:/groups/1', function () {
              return {
                groups: {
                  id: 1,
                  name: 'employees',
                  members: [
                    {
                      id: 2,
                      name: 'kinz',
                      group: 1
                    },
                    {
                      id: 3,
                      client_id: get$(member, 'clientId'),
                      name: 'mollie',
                      group: 1
                    }
                  ]
                }
              };
            });
            promise = childSession.flushIntoParent().then(function () {
              get$(expect(get$(get$(childGroup, 'members'), 'length')), 'to').eq(2);
              get$(expect(get$(get$(group, 'members'), 'length')), 'to').eq(2);
              return get$(expect(get$(adapter, 'h')), 'to').eql([
                'GET:/groups/1',
                'PUT:/groups/1'
              ]);
            });
            get$(expect(get$(get$(group, 'members'), 'length')), 'to').eq(2);
            return promise;
          });
        });
      });
      describe('managing comments', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'Comment', get$(Ep, 'Model').extend({
            message: Ep.attr('string'),
            post: Ep.belongsTo(get$(this, 'Post'))
          }));
          set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
          get$(this, 'Post').reopen({ comments: Ep.hasMany(get$(this, 'Comment')) });
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        });
        return it('creates a new comment within a child session', function () {
          var childPost, childSession, comment, post, promise;
          set$(get$(adapter, 'r'), 'POST:/comments', function () {
            return {
              comment: {
                client_id: get$(comment, 'clientId'),
                id: '3',
                message: '#2',
                post: '1'
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: "brogrammer's guide to beer pong",
            comments: []
          }));
          session.merge(get$(this, 'Comment').create({
            id: '2',
            message: 'yo',
            post: post
          }));
          childSession = session.newSession();
          childPost = childSession.add(post);
          comment = childSession.create('comment', {
            message: '#2',
            post: childPost
          });
          get$(expect(get$(get$(childPost, 'comments'), 'length')), 'to').eq(2);
          promise = childSession.flushIntoParent().then(function () {
            get$(expect(get$(get$(childPost, 'comments'), 'length')), 'to').eq(2);
            return get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(2);
          });
          get$(expect(get$(get$(childPost, 'comments'), 'length')), 'to').eq(2);
          get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(2);
          return promise;
        });
      });
      describe('two levels of embedded', function () {
        beforeEach(function () {
          var ProfileSerializer, UserSerializer;
          set$(this, 'User', get$(Ep, 'Model').extend({
            name: Ep.attr('string'),
            profile: Ep.belongsTo('profile')
          }));
          set$(get$(this, 'App'), 'User', get$(this, 'User'));
          set$(this, 'Profile', get$(Ep, 'Model').extend({
            bio: Ep.attr('string'),
            user: Ep.belongsTo('user'),
            tags: Ep.hasMany('tag')
          }));
          set$(get$(this, 'App'), 'Profile', get$(this, 'Profile'));
          set$(this, 'Tag', get$(Ep, 'Model').extend({
            name: Ep.attr('string'),
            profile: Ep.belongsTo('profile')
          }));
          set$(get$(this, 'App'), 'Tag', get$(this, 'Tag'));
          get$(this, 'container').register('model:user', get$(this, 'User'));
          get$(this, 'container').register('model:profile', get$(this, 'Profile'));
          get$(this, 'container').register('model:tag', get$(this, 'Tag'));
          UserSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { profile: { embedded: 'always' } } });
          get$(this, 'container').register('serializer:user', UserSerializer);
          ProfileSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { tags: { embedded: 'always' } } });
          return get$(this, 'container').register('serializer:profile', ProfileSerializer);
        });
        return it('deletes root', function () {
          var user;
          set$(get$(adapter, 'r'), 'DELETE:/users/1', {});
          get$(this, 'User').create({ id: '1' });
          user = session.merge(get$(this, 'User').create({
            id: '1',
            name: 'abby',
            profile: get$(this, 'Profile').create({
              id: '2',
              bio: 'asd',
              tags: [get$(this, 'Tag').create({
                  id: '3',
                  name: 'java'
                })]
            })
          }));
          session.deleteModel(user);
          return session.flush().then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql(['DELETE:/users/1']);
            return get$(get$(get$(expect(get$(user, 'isDeleted')), 'to'), 'be'), 'true');
          });
        });
      });
      describe('multiple belongsTo', function () {
        beforeEach(function () {
          set$(this, 'Foo', get$(Ep, 'Model').extend());
          set$(get$(this, 'App'), 'Foo', get$(this, 'Foo'));
          set$(this, 'Bar', get$(Ep, 'Model').extend());
          set$(get$(this, 'App'), 'Bar', get$(this, 'Bar'));
          set$(this, 'Baz', get$(Ep, 'Model').extend());
          set$(get$(this, 'App'), 'Baz', get$(this, 'Baz'));
          get$(this, 'Foo').reopen({
            bar: Ep.belongsTo(get$(this, 'Bar')),
            baz: Ep.belongsTo(get$(this, 'Baz'))
          });
          get$(this, 'Bar').reopen({ foos: Ep.hasMany(get$(this, 'Foo')) });
          get$(this, 'Baz').reopen({ foos: Ep.hasMany(get$(this, 'Foo')) });
          get$(this, 'container').register('model:foo', get$(this, 'Foo'));
          get$(this, 'container').register('model:bar', get$(this, 'Bar'));
          return get$(this, 'container').register('model:baz', get$(this, 'Baz'));
        });
        return it('sets ids properly', function () {
          var bar, baz, childSession, foo;
          set$(get$(adapter, 'r'), 'POST:/bars', function () {
            return {
              bar: {
                client_id: get$(bar, 'clientId'),
                id: '1'
              }
            };
          });
          set$(get$(adapter, 'r'), 'POST:/bazs', function () {
            return {
              baz: {
                client_id: get$(baz, 'clientId'),
                id: '1'
              }
            };
          });
          set$(get$(adapter, 'r'), 'POST:/foos', function (url, type, hash) {
            get$(expect(get$(get$(get$(hash, 'data'), 'foo'), 'bar')), 'to').eq(1);
            get$(expect(get$(get$(get$(hash, 'data'), 'foo'), 'baz')), 'to').eq(1);
            return {
              foo: {
                client_id: get$(foo, 'clientId'),
                id: '1',
                bar: '1',
                baz: '1'
              }
            };
          });
          childSession = session.newSession();
          foo = childSession.create('foo');
          bar = childSession.create('bar');
          baz = childSession.create('baz');
          foo.set('bar', bar);
          foo.set('baz', baz);
          return childSession.flushIntoParent().then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql([
              'POST:/bars',
              'POST:/bazs',
              'POST:/foos'
            ]);
            get$(get$(get$(get$(expect(get$(foo, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(get$(get$(get$(expect(get$(bar, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(get$(get$(get$(expect(get$(baz, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(get$(get$(get$(expect(get$(foo, 'bar')), 'to'), 'not'), 'be'), 'null');
            get$(get$(get$(get$(expect(get$(foo, 'baz')), 'to'), 'not'), 'be'), 'null');
            get$(expect(get$(get$(bar, 'foos'), 'length')), 'to').eq(1);
            return get$(expect(get$(get$(baz, 'foos'), 'length')), 'to').eq(1);
          });
        });
      });
      return describe('deep embedded relationship with leaf referencing a model without an inverse', function () {
        beforeEach(function () {
          var CampaignSerializer, CampaignStepSerializer;
          set$(this, 'Template', get$(Ep, 'Model').extend({ subject: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Template', get$(this, 'Template'));
          set$(this, 'Campaign', get$(Ep, 'Model').extend({
            name: Ep.attr('string'),
            campaignSteps: Ep.hasMany('campaign_step')
          }));
          set$(get$(this, 'App'), 'Campaign', get$(this, 'Campaign'));
          set$(this, 'CampaignStep', get$(Ep, 'Model').extend({
            campaign: Ep.belongsTo('campaign'),
            campaignTemplates: Ep.hasMany('campaign_template')
          }));
          set$(get$(this, 'App'), 'CampaignStep', get$(this, 'CampaignStep'));
          set$(this, 'CampaignTemplate', get$(Ep, 'Model').extend({
            campaignStep: Ep.belongsTo('campaign_step'),
            template: Ep.belongsTo('template')
          }));
          set$(get$(this, 'App'), 'CampaignTemplate', get$(this, 'CampaignTemplate'));
          get$(this, 'container').register('model:template', get$(this, 'Template'));
          get$(this, 'container').register('model:campaign', get$(this, 'Campaign'));
          get$(this, 'container').register('model:campaign_template', get$(this, 'CampaignTemplate'));
          get$(this, 'container').register('model:campaign_step', get$(this, 'CampaignStep'));
          CampaignSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { campaignSteps: { embedded: 'always' } } });
          CampaignStepSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { campaignTemplates: { embedded: 'always' } } });
          get$(this, 'container').register('serializer:campaign', CampaignSerializer);
          return get$(this, 'container').register('serializer:campaign_step', CampaignStepSerializer);
        });
        it('creates new embedded children with reference to new hasMany', function () {
          var calls, campaign, campaignStep, campaignStep2, campaignTemplate, campaignTemplate2, template, template2;
          set$(get$(adapter, 'r'), 'POST:/templates', function (url, type, hash) {
            if (get$(get$(get$(hash, 'data'), 'template'), 'client_id') === get$(template, 'clientId')) {
              return {
                templates: {
                  client_id: get$(template, 'clientId'),
                  id: 2,
                  subject: 'topological sort'
                }
              };
            } else {
              return {
                templates: {
                  client_id: get$(template2, 'clientId'),
                  id: 5,
                  subject: 'do you speak it?'
                }
              };
            }
          });
          set$(get$(adapter, 'r'), 'PUT:/campaigns/1', function (url, type, hash) {
            get$(expect(get$(get$(get$(get$(get$(hash, 'data'), 'campaign'), 'campaign_steps')[0], 'campaign_templates')[0], 'template')), 'to').eq(2);
            get$(expect(get$(get$(get$(get$(get$(hash, 'data'), 'campaign'), 'campaign_steps')[1], 'campaign_templates')[0], 'template')), 'to').eq(5);
            return {
              campaigns: {
                id: 1,
                client_id: get$(campaign, 'clientId'),
                campaign_steps: [
                  {
                    client_id: get$(campaignStep, 'clientId'),
                    id: 3,
                    campaign_templates: [{
                        id: 4,
                        client_id: get$(campaignTemplate, 'clientId'),
                        template: 2,
                        campaign_step: 3
                      }]
                  },
                  {
                    client_id: get$(campaignStep2, 'clientId'),
                    id: 6,
                    campaign_templates: [{
                        id: 7,
                        client_id: get$(campaignTemplate2, 'clientId'),
                        template: 5,
                        campaign_step: 6
                      }]
                  }
                ]
              }
            };
          });
          calls = 0;
          set$(adapter, 'runLater', function (callback) {
            calls++;
            return Ember.run.later(callback, calls * 100);
          });
          campaign = session.merge(get$(this, 'session').build('campaign', {
            id: 1,
            campaignSteps: []
          }));
          session = session.newSession();
          campaign = session.add(campaign);
          campaignStep = session.create('campaign_step', { campaign: campaign });
          campaignTemplate = session.create('campaign_template');
          get$(campaignStep, 'campaignTemplates').pushObject(campaignTemplate);
          template = session.create('template');
          set$(template, 'subject', 'topological sort');
          set$(campaignTemplate, 'template', template);
          campaignStep2 = session.create('campaign_step', { campaign: campaign });
          campaignTemplate2 = session.create('campaign_template');
          get$(campaignStep2, 'campaignTemplates').pushObject(campaignTemplate2);
          template2 = session.create('template');
          set$(template2, 'subject', 'do you speak it?');
          set$(campaignTemplate2, 'template', template2);
          return session.flush().then(function () {
            get$(expect(get$(template, 'id')), 'to').eq('2');
            get$(get$(get$(expect(get$(template, 'isNew')), 'to'), 'be'), 'false');
            get$(expect(get$(template, 'subject')), 'to').eq('topological sort');
            get$(get$(get$(get$(expect(get$(campaignTemplate, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(expect(get$(campaignTemplate, 'template')), 'to').eq(template);
            get$(expect(get$(campaignTemplate, 'campaignStep')), 'to').eq(campaignStep);
            get$(expect(get$(template2, 'id')), 'to').eq('5');
            get$(get$(get$(expect(get$(template2, 'isNew')), 'to'), 'be'), 'false');
            get$(expect(get$(template2, 'subject')), 'to').eq('do you speak it?');
            get$(get$(get$(get$(expect(get$(campaignTemplate2, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(expect(get$(campaignTemplate2, 'template')), 'to').eq(template2);
            get$(expect(get$(campaignTemplate2, 'campaignStep')), 'to').eq(campaignStep2);
            return get$(expect(get$(adapter, 'h')), 'to').eql([
              'POST:/templates',
              'POST:/templates',
              'PUT:/campaigns/1'
            ]);
          });
        });
        return it('save changes to parent when children not loaded in child session', function () {
          var campaign, step, step2;
          set$(get$(adapter, 'r'), 'PUT:/campaigns/1', function (url, type, hash) {
            return get$(hash, 'data');
          });
          campaign = session.merge(get$(this, 'session').build('campaign', {
            name: 'old name',
            id: 1,
            campaignSteps: []
          }));
          step = session.merge(get$(this, 'session').build('campaign_step', {
            id: 2,
            campaign: campaign,
            campaignTemplates: []
          }));
          step2 = session.merge(get$(this, 'session').build('campaign_step', {
            id: 4,
            campaign: campaign,
            campaignTemplates: []
          }));
          session.merge(get$(this, 'session').build('campaign_template', {
            id: 3,
            campaignStep: step
          }));
          get$(expect(get$(get$(campaign, 'campaignSteps'), 'firstObject')), 'to').eq(step);
          session = session.newSession();
          campaign = session.add(campaign);
          set$(campaign, 'name', 'new name');
          return session.flush().then(function () {
            get$(expect(get$(campaign, 'name')), 'to').eq('new name');
            return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/campaigns/1']);
          });
        });
      });
    });
  });
define("epf-test/rest/rest.concurrent",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        return session = get$(this, 'session');
      });
      return context('concurrent updates with simple model', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({
            title: Ep.attr('string'),
            submitted: Ep.attr('boolean')
          }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          return get$(this, 'container').register('model:post', get$(this, 'Post'));
        });
        it('all flushes resolve', function () {
          var f1, f2, post;
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
            return {
              posts: {
                id: 1,
                title: get$(get$(get$(hash, 'data'), 'post'), 'title'),
                submitted: 'true'
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'twerkin',
            submitted: false
          }));
          set$(post, 'title', 'update1');
          f1 = session.flush();
          set$(post, 'title', 'update2');
          f2 = session.flush();
          return Ember.RSVP.all([
            f1,
            f2
          ]).then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql([
              'PUT:/posts/1',
              'PUT:/posts/1'
            ]);
            return get$(expect(get$(post, 'title')), 'to').eq('update2');
          });
        });
        it('second flush waits for first to complete', function () {
          var calls, f1, f2, post;
          calls = 0;
          set$(adapter, 'runLater', function (callback) {
            var delay;
            delay = calls > 0 ? 0 : 10;
            calls++;
            return Ember.run.later(callback, delay);
          });
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
            return {
              posts: {
                id: 1,
                title: get$(get$(get$(hash, 'data'), 'post'), 'title'),
                submitted: 'true'
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'twerkin',
            submitted: false
          }));
          set$(post, 'title', 'update1');
          f1 = session.flush();
          set$(post, 'title', 'update2');
          f2 = session.flush();
          return Ember.RSVP.all([
            f1,
            f2
          ]).then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql([
              'PUT:/posts/1',
              'PUT:/posts/1'
            ]);
            return get$(expect(get$(post, 'title')), 'to').eq('update2');
          });
        });
        it('three concurrent flushes', function () {
          var calls, f1, f2, f3, post;
          calls = 0;
          set$(adapter, 'runLater', function (callback) {
            var delay;
            delay = calls % 2 === 1 ? 0 : 10;
            calls++;
            return Ember.run.later(callback, delay);
          });
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
            return {
              posts: {
                id: 1,
                title: get$(get$(get$(hash, 'data'), 'post'), 'title'),
                submitted: 'true'
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'twerkin',
            submitted: false
          }));
          set$(post, 'title', 'update1');
          f1 = session.flush();
          set$(post, 'title', 'update2');
          f2 = session.flush();
          set$(post, 'title', 'update3');
          f3 = session.flush();
          return Ember.RSVP.all([
            f1,
            f2,
            f3
          ]).then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql([
              'PUT:/posts/1',
              'PUT:/posts/1',
              'PUT:/posts/1'
            ]);
            return get$(expect(get$(post, 'title')), 'to').eq('update3');
          });
        });
        it('cascades failures', function () {
          var calls, f1, f2, f3, post;
          calls = 0;
          set$(adapter, 'runLater', function (callback) {
            var delay;
            delay = calls % 2 === 1 ? 0 : 10;
            calls++;
            return Ember.run.later(callback, delay);
          });
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
            var rev;
            if (get$(get$(get$(hash, 'data'), 'post'), 'title') === 'update1')
              throw 'twerkin too hard';
            rev = parseInt(get$(get$(get$(hash, 'data'), 'post'), 'title').split('update')[1]) + 1;
            return {
              posts: {
                id: 1,
                title: get$(get$(get$(hash, 'data'), 'post'), 'title'),
                submitted: 'true',
                rev: rev
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'twerkin',
            submitted: false,
            rev: 1
          }));
          set$(post, 'title', 'update1');
          f1 = session.flush();
          set$(post, 'title', 'update2');
          f2 = session.flush();
          set$(post, 'title', 'update3');
          f3 = session.flush();
          return f3.then(null, function () {
            var shadow;
            get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
            get$(expect(get$(post, 'title')), 'to').eq('update3');
            shadow = session.getShadow(post);
            return get$(expect(get$(shadow, 'title')), 'to').eq('twerkin');
          });
        });
        return it('can retry after failure', function () {
          var count, post;
          count = 0;
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
            if (count++ === 0)
              throw 'plz twerk again';
            return {
              posts: {
                id: 1,
                title: get$(get$(get$(hash, 'data'), 'post'), 'title'),
                submitted: 'true'
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'twerkin',
            submitted: false
          }));
          set$(post, 'title', 'update1');
          return session.flush().then(null, function () {
            var shadow;
            get$(expect(get$(post, 'title')), 'to').eq('update1');
            shadow = session.getShadow(post);
            get$(expect(get$(shadow, 'title')), 'to').eq('twerkin');
            return session.flush().then(function () {
              get$(expect(get$(post, 'title')), 'to').eq('update1');
              shadow = session.getShadow(post);
              return get$(expect(get$(shadow, 'title')), 'to').eq('update1');
            });
          });
        });
      });
    });
  });
define("epf-test/rest/rest.errors",
  ["./_shared","epf/model/model","epf/model/attribute","epf/relationships/belongs_to","epf/relationships/has_many"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    var Model = __dependency2__["default"];
    var attr = __dependency3__["default"];
    var belongsTo = __dependency4__["default"];
    var hasMany = __dependency5__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        return session = get$(this, 'session');
      });
      return context('simple model with errors', function () {
        beforeEach(function () {
          set$(this, 'Post', Model.extend({
            title: attr('string'),
            category: attr('string'),
            createdAt: attr('date')
          }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          return get$(this, 'container').register('model:post', get$(this, 'Post'));
        });
        context('on create', function () {
          it('handles validation errors', function () {
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
              throw {
                status: 422,
                responseText: JSON.stringify({
                  errors: {
                    title: 'is too short',
                    created_at: 'cannot be in the past'
                  }
                })
              };
            });
            session.merge(get$(this, 'Post').create({
              id: '1',
              title: 'test'
            }));
            return session.load('post', 1).then(function (post) {
              get$(expect(get$(post, 'title')), 'to').eq('test');
              set$(post, 'title', '');
              return session.flush().then(null, function () {
                get$(get$(get$(expect(get$(post, 'hasErrors')), 'to'), 'be'), 'true');
                get$(expect(get$(post, 'title')), 'to').eq('');
                get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is too short');
                get$(expect(get$(get$(post, 'errors'), 'createdAt')), 'to').eq('cannot be in the past');
                return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
              });
            });
          });
          it('overwrites existing errors when error-only payload returned', function () {
            var post;
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
              throw {
                status: 422,
                responseText: JSON.stringify({ errors: { title: 'is too short' } })
              };
            });
            post = session.merge(get$(this, 'Post').create({
              id: '1',
              title: 'test'
            }));
            set$(post, 'title', '');
            set$(post, 'errors', get$(Ep, 'Errors').create({ content: { title: 'is not good' } }));
            get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is not good');
            return session.flush().then(null, function () {
              get$(get$(get$(expect(get$(post, 'hasErrors')), 'to'), 'be'), 'true');
              get$(expect(get$(post, 'title')), 'to').eq('');
              get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is too short');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
            });
          });
          it('handles payload with error properties', function () {
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
              throw {
                status: 422,
                responseText: JSON.stringify({
                  post: {
                    id: 1,
                    title: 'test',
                    errors: { title: 'is too short' }
                  }
                })
              };
            });
            session.merge(get$(this, 'Post').create({
              id: '1',
              title: 'test'
            }));
            return session.load('post', 1).then(function (post) {
              get$(expect(get$(post, 'title')), 'to').eq('test');
              set$(post, 'title', '');
              return session.flush().then(null, function () {
                get$(get$(get$(expect(get$(post, 'hasErrors')), 'to'), 'be'), 'true');
                get$(expect(get$(post, 'title')), 'to').eq('');
                get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is too short');
                return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
              });
            });
          });
          it('merges payload with error properties and higher rev', function () {
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
              throw {
                status: 422,
                responseText: JSON.stringify({
                  post: {
                    id: 1,
                    title: '',
                    category: 'new',
                    rev: 10,
                    errors: { title: 'is too short' }
                  }
                })
              };
            });
            session.merge(get$(this, 'Post').create({
              id: '1',
              title: 'test'
            }));
            return session.load('post', 1).then(function (post) {
              get$(expect(get$(post, 'title')), 'to').eq('test');
              set$(post, 'title', '');
              return session.flush().then(null, function () {
                get$(get$(get$(expect(get$(post, 'hasErrors')), 'to'), 'be'), 'true');
                get$(expect(get$(post, 'title')), 'to').eq('');
                get$(expect(get$(post, 'category')), 'to').eq('new');
                get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is too short');
                return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
              });
            });
          });
          it('merges payload with error and latest client changes against latest client version', function () {
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
              throw {
                status: 422,
                responseText: JSON.stringify({
                  post: {
                    id: 1,
                    title: 'Something',
                    client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev'),
                    errors: { title: 'cannot be empty' }
                  }
                })
              };
            });
            session.merge(get$(this, 'Post').create({
              id: '1',
              title: 'test'
            }));
            return session.load('post', 1).then(function (post) {
              get$(expect(get$(post, 'title')), 'to').eq('test');
              set$(post, 'title', '');
              return session.flush().then(null, function () {
                get$(get$(get$(expect(get$(post, 'hasErrors')), 'to'), 'be'), 'true');
                get$(expect(get$(post, 'title')), 'to').eq('Something');
                return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
              });
            });
          });
          return it('empty errors object should deserialize without errors', function () {
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
              return {
                post: {
                  id: 1,
                  title: '',
                  errors: {}
                }
              };
            });
            session.merge(get$(this, 'Post').create({
              id: '1',
              title: 'test'
            }));
            return session.load('post', 1).then(function (post) {
              get$(expect(get$(post, 'title')), 'to').eq('test');
              set$(post, 'title', '');
              return session.flush().then(null, function () {
                get$(get$(get$(expect(get$(post, 'hasErrors')), 'to'), 'be'), 'false');
                get$(expect(get$(post, 'title')), 'to').eq('');
                return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
              });
            });
          });
        });
        context('on create', function () {
          it('handles error', function () {
            var post;
            set$(get$(adapter, 'r'), 'POST:/posts', function () {
              throw {
                status: 422,
                responseText: JSON.stringify({ errors: { title: 'is lamerz' } })
              };
            });
            post = session.create('post', { title: 'errorz' });
            return session.flush().then(null, function () {
              return get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is lamerz');
            });
          });
          it('merges payload with latest client changes against latest client version', function () {
            var post;
            set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
              throw {
                status: 422,
                responseText: JSON.stringify({
                  post: {
                    title: 'Something',
                    client_id: get$(get$(get$(hash, 'data'), 'post'), 'client_id'),
                    client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev'),
                    errors: { title: 'cannot be empty' }
                  }
                })
              };
            });
            post = session.create('post', { title: '' });
            return session.flush().then(null, function () {
              return get$(expect(get$(post, 'title')), 'to').eq('Something');
            });
          });
          it('succeeds after retry', function () {
            var post;
            set$(get$(adapter, 'r'), 'POST:/posts', function () {
              throw {
                status: 422,
                responseText: JSON.stringify({ errors: { title: 'is lamerz' } })
              };
            });
            post = session.create('post', { title: 'errorz' });
            return session.flush().then(null, function () {
              get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is lamerz');
              set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
                return {
                  post: {
                    title: 'linkbait',
                    id: 1,
                    client_id: get$(get$(get$(hash, 'data'), 'post'), 'client_id'),
                    client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev')
                  }
                };
              });
              set$(session, 'title', 'linkbait');
              return session.flush().then(function () {
                get$(expect(get$(post, 'title')), 'to').eq('linkbait');
                return get$(expect(get$(adapter, 'h')), 'to').eql([
                  'POST:/posts',
                  'POST:/posts'
                ]);
              });
            });
          });
          it('succeeds after retry when failure merged data', function () {
            var post;
            set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
              throw {
                status: 422,
                responseText: JSON.stringify({
                  post: {
                    title: 'Something',
                    client_id: get$(get$(get$(hash, 'data'), 'post'), 'client_id'),
                    client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev'),
                    errors: { title: 'is lamerz' }
                  }
                })
              };
            });
            post = session.create('post', { title: 'errorz' });
            return session.flush().then(null, function () {
              get$(expect(get$(post, 'title')), 'to').eq('Something');
              get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is lamerz');
              set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
                return {
                  post: {
                    title: 'linkbait',
                    id: 1,
                    client_id: get$(get$(get$(hash, 'data'), 'post'), 'client_id'),
                    client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev')
                  }
                };
              });
              set$(session, 'title', 'linkbait');
              return session.flush().then(function () {
                get$(expect(get$(post, 'title')), 'to').eq('linkbait');
                get$(expect(get$(adapter, 'h')), 'to').eql([
                  'POST:/posts',
                  'POST:/posts'
                ]);
                return get$(get$(get$(expect(get$(get$(post, 'errors'), 'title')), 'to'), 'be'), 'undefined');
              });
            });
          });
          return context('in child session', function () {
            it('merges payload with latest client changes against latest client version', function () {
              var post;
              set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
                throw {
                  status: 422,
                  responseText: JSON.stringify({
                    post: {
                      title: 'Something',
                      client_id: get$(get$(get$(hash, 'data'), 'post'), 'client_id'),
                      client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev'),
                      errors: { title: 'cannot be empty' }
                    }
                  })
                };
              });
              session = session.newSession();
              post = session.create('post', { title: '' });
              return session.flush().then(null, function () {
                return get$(expect(get$(post, 'title')), 'to').eq('Something');
              });
            });
            it('succeeds after retry', function () {
              var post;
              set$(get$(adapter, 'r'), 'POST:/posts', function () {
                throw {
                  status: 422,
                  responseText: JSON.stringify({ errors: { title: 'is lamerz' } })
                };
              });
              session = session.newSession();
              post = session.create('post', { title: 'errorz' });
              return session.flush().then(null, function () {
                get$(expect(get$(get$(post, 'errors'), 'title')), 'to').eq('is lamerz');
                set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
                  return {
                    post: {
                      title: 'linkbait',
                      id: 1,
                      client_id: get$(get$(get$(hash, 'data'), 'post'), 'client_id'),
                      client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev')
                    }
                  };
                });
                set$(session, 'title', 'linkbait');
                return session.flush().then(function () {
                  get$(expect(get$(post, 'title')), 'to').eq('linkbait');
                  return get$(expect(get$(adapter, 'h')), 'to').eql([
                    'POST:/posts',
                    'POST:/posts'
                  ]);
                });
              });
            });
            return it('succeeds after retry when failure merged data', function () {
              var post;
              set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
                throw {
                  status: 422,
                  responseText: JSON.stringify({
                    post: {
                      title: 'Something',
                      client_id: get$(get$(get$(hash, 'data'), 'post'), 'client_id'),
                      client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev'),
                      errors: { title: 'is lamerz' }
                    }
                  })
                };
              });
              session = session.newSession();
              post = session.create('post', { title: 'errorz' });
              return session.flush().then(null, function () {
                get$(expect(get$(post, 'title')), 'to').eq('Something');
                set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
                  return {
                    post: {
                      title: 'linkbait',
                      id: 1,
                      client_id: get$(get$(get$(hash, 'data'), 'post'), 'client_id'),
                      client_rev: get$(get$(get$(hash, 'data'), 'post'), 'client_rev')
                    }
                  };
                });
                set$(session, 'title', 'linkbait');
                return session.flush().then(function () {
                  get$(expect(get$(post, 'title')), 'to').eq('linkbait');
                  return get$(expect(get$(adapter, 'h')), 'to').eql([
                    'POST:/posts',
                    'POST:/posts'
                  ]);
                });
              });
            });
          });
        });
        return context('on load', function () {
          return [
            401,
            403,
            404
          ].forEach(function (errorCode) {
            return it('handles ' + errorCode, function () {
              set$(get$(adapter, 'r'), 'GET:/posts/1', function () {
                throw { status: errorCode };
              });
              return session.load('post', 1).then(null, function (post) {
                get$(get$(get$(expect(get$(post, 'hasErrors')), 'to'), 'eq'), 'true');
                get$(expect(get$(get$(post, 'errors'), 'status')), 'to').eq(errorCode);
                return get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
              });
            });
          });
        });
      });
    });
  });
define("epf-test/rest/rest.meta",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        return session = get$(this, 'session');
      });
      return context('returns meta data when', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          return get$(this, 'container').register('model:post', get$(this, 'Post'), { instantiate: false });
        });
        it('loads', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            meta: { traffic: 'heavy' },
            posts: {
              id: 1,
              title: 'mvcc ftw'
            }
          });
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            get$(expect(get$(get$(post, 'meta'), 'traffic')), 'to').eq('heavy');
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            return get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
          });
        });
        it('saves', function () {
          var post;
          set$(get$(adapter, 'r'), 'POST:/posts', function () {
            return {
              meta: { traffic: 'heavy' },
              posts: {
                client_id: get$(post, 'clientId'),
                id: 1,
                title: 'mvcc ftw'
              }
            };
          });
          post = session.create('post');
          set$(post, 'title', 'mvcc ftw');
          return session.flush().then(function (result) {
            get$(expect(get$(get$(get$(result, 'firstObject'), 'meta'), 'traffic')), 'to').eq('heavy');
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            return get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts']);
          });
        });
        it('updates', function () {
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
            return {
              meta: { traffic: 'heavy' },
              posts: {
                id: 1,
                title: 'updated'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          return session.load('post', 1).then(function (post) {
            get$(expect(get$(post, 'title')), 'to').eq('test');
            set$(post, 'title', 'updated');
            return session.flush().then(function (result) {
              get$(expect(get$(get$(get$(result, 'firstObject'), 'meta'), 'traffic')), 'to').eq('heavy');
              get$(expect(get$(post, 'title')), 'to').eq('updated');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
            });
          });
        });
        it('updates multiple times', function () {
          var post;
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
            return {
              meta: { traffic: 'heavy' },
              posts: {
                id: 1,
                title: 'updated'
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          get$(expect(get$(post, 'title')), 'to').eq('test');
          set$(post, 'title', 'updated');
          return session.flush().then(function (result) {
            get$(expect(get$(get$(get$(result, 'firstObject'), 'meta'), 'traffic')), 'to').eq('heavy');
            get$(expect(get$(post, 'title')), 'to').eq('updated');
            get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
              return {
                meta: { traffic: 'lighter' },
                posts: {
                  id: 1,
                  title: 'updated again'
                }
              };
            });
            set$(post, 'title', 'updated again');
            return session.flush().then(function (result) {
              get$(expect(get$(get$(get$(result, 'firstObject'), 'meta'), 'traffic')), 'to').eq('lighter');
              get$(expect(get$(post, 'title')), 'to').eq('updated again');
              return get$(expect(get$(adapter, 'h')), 'to').eql([
                'PUT:/posts/1',
                'PUT:/posts/1'
              ]);
            });
          });
        });
        it('deletes', function () {
          set$(get$(adapter, 'r'), 'DELETE:/posts/1', { meta: { traffic: 'heavy' } });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          return session.load('post', 1).then(function (post) {
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('test');
            session.deleteModel(post);
            return session.flush().then(function (result) {
              get$(expect(get$(get$(get$(result, 'firstObject'), 'meta'), 'traffic')), 'to').eq('heavy');
              get$(get$(get$(expect(get$(post, 'isDeleted')), 'to'), 'be'), 'true');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['DELETE:/posts/1']);
            });
          });
        });
        it('refreshes', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            meta: { traffic: 'lighter' },
            posts: {
              id: 1,
              title: 'something new'
            }
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            get$(expect(get$(post, 'title')), 'to').eq('test');
            get$(expect(get$(adapter, 'h')), 'to').eql([]);
            return session.refresh(post).then(function (post) {
              get$(expect(get$(post, 'title')), 'to').eq('something new');
              get$(expect(get$(get$(post, 'meta'), 'traffic')), 'to').eq('lighter');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
            });
          });
        });
        return it('finds', function () {
          set$(get$(adapter, 'r'), 'GET:/posts', function (url, type, hash) {
            get$(expect(get$(hash, 'data')), 'to').eql({ q: 'aardvarks' });
            return {
              meta: { traffic: 'heavy' },
              posts: [
                {
                  id: 1,
                  title: 'aardvarks explained'
                },
                {
                  id: 2,
                  title: 'aardvarks in depth'
                }
              ]
            };
          });
          return session.find('post', { q: 'aardvarks' }).then(function (models) {
            get$(expect(get$(get$(models, 'meta'), 'traffic')), 'to').eq('heavy');
            get$(expect(get$(models, 'length')), 'to').eq(2);
            return get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts']);
          });
        });
      });
    });
  });
define("epf-test/rest/rest.one_to_many",
  ["./_shared","epf/model/model","epf/model/attribute","epf/relationships/belongs_to","epf/relationships/has_many","epf/serializers/model"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    var Model = __dependency2__["default"];
    var attr = __dependency3__["default"];
    var belongsTo = __dependency4__["default"];
    var hasMany = __dependency5__["default"];
    var ModelSerializer = __dependency6__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        return session = get$(this, 'session');
      });
      return context('one->many', function () {
        beforeEach(function () {
          set$(this, 'Post', Model.extend({ title: attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'Comment', Model.extend({
            message: attr('string'),
            post: belongsTo(get$(this, 'Post'))
          }));
          set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
          get$(this, 'Post').reopen({ comments: hasMany(get$(this, 'Comment')) });
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        });
        it('loads lazily', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            posts: {
              id: 1,
              title: 'mvcc ftw',
              comments: [2]
            }
          });
          set$(get$(adapter, 'r'), 'GET:/comments/2', {
            comments: {
              id: 2,
              message: 'first',
              post: 1
            }
          });
          return session.load('post', 1).then(function (post) {
            var comment;
            get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
            comment = get$(get$(post, 'comments'), 'firstObject');
            get$(get$(get$(expect(get$(comment, 'message')), 'to'), 'be'), 'undefined');
            return get$(get$(post, 'comments'), 'firstObject').load().then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql([
                'GET:/posts/1',
                'GET:/comments/2'
              ]);
              get$(expect(get$(comment, 'message')), 'to').eq('first');
              return get$(get$(get$(expect(get$(comment, 'post').isEqual(post)), 'to'), 'be'), 'true');
            });
          });
        });
        it('creates', function () {
          var comment, post;
          set$(get$(adapter, 'r'), 'POST:/posts', function () {
            return {
              posts: {
                client_id: get$(post, 'clientId'),
                id: 1,
                title: 'topological sort',
                comments: []
              }
            };
          });
          set$(get$(adapter, 'r'), 'POST:/comments', function (url, type, hash) {
            get$(expect(get$(get$(get$(hash, 'data'), 'comment'), 'post')), 'to').eq(1);
            return {
              comments: {
                client_id: get$(comment, 'clientId'),
                id: 2,
                message: 'seems good',
                post: 1
              }
            };
          });
          post = session.create('post');
          set$(post, 'title', 'topological sort');
          comment = session.create('comment');
          set$(comment, 'message', 'seems good');
          set$(comment, 'post', post);
          get$(expect(get$(get$(post, 'comments'), 'firstObject')), 'to').eq(comment);
          return session.flush().then(function () {
            get$(get$(get$(get$(expect(get$(post, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(get$(get$(expect(get$(post, 'isNew')), 'to'), 'be'), 'false');
            get$(expect(get$(post, 'title')), 'to').eq('topological sort');
            get$(get$(get$(get$(expect(get$(comment, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(expect(get$(comment, 'message')), 'to').eq('seems good');
            get$(expect(get$(comment, 'post')), 'to').eq(post);
            get$(expect(get$(get$(comment, 'post'), 'id')), 'to').eq('1');
            get$(expect(get$(get$(post, 'comments'), 'firstObject')), 'to').eq(comment);
            return get$(expect(get$(adapter, 'h')), 'to').eql([
              'POST:/posts',
              'POST:/comments'
            ]);
          });
        });
        it('creates and server can return additional children', function () {
          var post;
          set$(get$(adapter, 'r'), 'POST:/posts', function () {
            return {
              comments: [{
                  id: 2,
                  post: 1,
                  message: 'seems good'
                }],
              posts: {
                client_id: get$(post, 'clientId'),
                id: 1,
                title: 'topological sort',
                comments: [2]
              }
            };
          });
          post = session.create('post');
          set$(post, 'title', 'topological sort');
          return session.flush().then(function () {
            var comment;
            comment = get$(get$(post, 'comments'), 'firstObject');
            get$(get$(get$(get$(expect(get$(post, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(get$(get$(expect(get$(post, 'isNew')), 'to'), 'be'), 'false');
            get$(expect(get$(post, 'title')), 'to').eq('topological sort');
            get$(get$(get$(get$(expect(get$(comment, 'id')), 'to'), 'not'), 'be'), 'null');
            get$(expect(get$(comment, 'message')), 'to').eq('seems good');
            get$(expect(get$(comment, 'post')), 'to').eq(post);
            get$(expect(get$(get$(comment, 'post'), 'id')), 'to').eq('1');
            return get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts']);
          });
        });
        it('creates child', function () {
          var comment;
          set$(get$(adapter, 'r'), 'POST:/comments', function () {
            return {
              comments: {
                client_id: get$(comment, 'clientId'),
                id: 2,
                message: 'new child',
                post: 1
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'parent',
            comments: []
          }));
          comment = null;
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            comment = session.create('comment', { message: 'new child' });
            set$(comment, 'post', post);
            get$(expect(get$(post, 'comments').toArray()), 'to').eql([comment]);
            return session.flush().then(function () {
              get$(expect(get$(post, 'comments').toArray()), 'to').eql([comment]);
              get$(expect(get$(comment, 'message')), 'to').eq('new child');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/comments']);
            });
          });
        });
        it('creates child with lazy reference to parent', function () {
          var comment, post;
          set$(get$(adapter, 'r'), 'POST:/comments', function () {
            return {
              comments: {
                client_id: get$(comment, 'clientId'),
                id: 2,
                message: 'new child',
                post: 1
              }
            };
          });
          post = get$(this, 'Post').create({ id: 1 });
          comment = session.create('comment', { message: 'new child' });
          set$(comment, 'post', post);
          return session.flush().then(function () {
            get$(expect(get$(comment, 'message')), 'to').eq('new child');
            get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/comments']);
            return get$(get$(get$(expect(post.isPropertyLoaded('comments')), 'to'), 'be'), 'false');
          });
        });
        it('create followed by delete does not hit server', function () {
          var comment;
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'parent'
          }));
          comment = null;
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            comment = session.create('comment', { message: 'new child' });
            set$(comment, 'post', post);
            session.deleteModel(comment);
            return session.flush().then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql([]);
              return get$(get$(get$(expect(get$(comment, 'isDeleted')), 'to'), 'be'), 'true');
            });
          });
        });
        it('updates parent, updates child, and saves sibling', function () {
          var comment, post, sibling;
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
            return {
              post: {
                id: 1,
                title: 'polychild',
                comments: [2]
              }
            };
          });
          set$(get$(adapter, 'r'), 'PUT:/comments/2', function () {
            return {
              comments: {
                id: 2,
                title: 'original sibling',
                post: 1
              }
            };
          });
          set$(get$(adapter, 'r'), 'POST:/comments', function () {
            return {
              comments: {
                client_id: get$(sibling, 'clientId'),
                id: 3,
                message: 'sibling',
                post: 1
              }
            };
          });
          post = get$(this, 'Post').create({
            id: '1',
            title: 'parent',
            comments: []
          });
          get$(post, 'comments').addObject(get$(this, 'Comment').create({
            id: '2',
            message: 'child',
            post: post
          }));
          session.merge(post);
          comment = null;
          sibling = null;
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            comment = get$(get$(post, 'comments'), 'firstObject');
            sibling = session.create('comment', { message: 'sibling' });
            set$(sibling, 'post', post);
            set$(comment, 'message', 'original sibling');
            set$(post, 'title', 'polychild');
            get$(expect(get$(post, 'comments').toArray()), 'to').eql([
              comment,
              sibling
            ]);
            return session.flush().then(function () {
              get$(expect(get$(post, 'comments').toArray()), 'to').eql([
                comment,
                sibling
              ]);
              return get$(expect(get$(adapter, 'h')), 'to').eql([
                'PUT:/posts/1',
                'PUT:/comments/2',
                'POST:/comments'
              ]);
            });
          });
        });
        it('updates with unloaded child', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', function () {
            return {
              posts: {
                id: 1,
                title: 'mvcc ftw',
                comments: [2]
              }
            };
          });
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
            return {
              posts: {
                id: 1,
                title: 'updated',
                comments: [2]
              }
            };
          });
          return session.load('post', 1).then(function (post) {
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
            set$(post, 'title', 'updated');
            return session.flush().then(function () {
              get$(expect(get$(post, 'title')), 'to').eq('updated');
              return get$(expect(get$(adapter, 'h')), 'to').eql([
                'GET:/posts/1',
                'PUT:/posts/1'
              ]);
            });
          });
        });
        it('deletes child', function () {
          var post;
          set$(get$(adapter, 'r'), 'PUT:/posts/1', {
            posts: {
              id: 1,
              title: 'mvcc ftw',
              comments: [2]
            }
          });
          set$(get$(adapter, 'r'), 'DELETE:/comments/2', {});
          post = get$(this, 'Post').create({
            id: '1',
            title: 'parent',
            comments: []
          });
          get$(post, 'comments').addObject(get$(this, 'Comment').create({
            id: '2',
            message: 'child',
            post: post
          }));
          session.merge(post);
          return session.load('post', 1).then(function (post) {
            var comment;
            comment = get$(get$(post, 'comments'), 'firstObject');
            session.deleteModel(comment);
            get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
            return session.flush().then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql(['DELETE:/comments/2']);
              return get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
            });
          });
        });
        it('deletes child and updates parent', function () {
          var post;
          set$(get$(adapter, 'r'), 'PUT:/posts/1', {
            posts: {
              id: 1,
              title: 'childless',
              comments: []
            }
          });
          set$(get$(adapter, 'r'), 'DELETE:/comments/2', {});
          post = get$(this, 'Post').create({
            id: '1',
            title: 'parent',
            comments: []
          });
          get$(post, 'comments').addObject(get$(this, 'Comment').create({
            id: '2',
            message: 'child',
            post: post
          }));
          session.merge(post);
          return session.load('post', 1).then(function (post) {
            var comment;
            comment = get$(get$(post, 'comments'), 'firstObject');
            session.deleteModel(comment);
            get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
            set$(post, 'title', 'childless');
            return session.flush().then(function () {
              get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
              get$(expect(get$(post, 'title')), 'to').eq('childless');
              return get$(expect(get$(adapter, 'h')), 'to').eql([
                'DELETE:/comments/2',
                'PUT:/posts/1'
              ]);
            });
          });
        });
        it('deletes parent and child', function () {
          var post;
          set$(get$(adapter, 'r'), 'DELETE:/posts/1', {});
          set$(get$(adapter, 'r'), 'DELETE:/comments/2', {});
          post = get$(this, 'Post').create({
            id: '1',
            title: 'parent',
            comments: []
          });
          get$(post, 'comments').addObject(get$(this, 'Comment').create({
            id: '2',
            message: 'child',
            post: post
          }));
          session.merge(post);
          return session.load('post', 1).then(function (post) {
            var comment;
            comment = get$(get$(post, 'comments'), 'firstObject');
            session.deleteModel(comment);
            get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
            session.deleteModel(post);
            return session.flush().then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql([
                'DELETE:/comments/2',
                'DELETE:/posts/1'
              ]);
              get$(get$(get$(expect(get$(post, 'isDeleted')), 'to'), 'be'), 'true');
              return get$(get$(get$(expect(get$(comment, 'isDeleted')), 'to'), 'be'), 'true');
            });
          });
        });
        return context('embedded', function () {
          beforeEach(function () {
            var PostSerializer;
            PostSerializer = ModelSerializer.extend({ properties: { comments: { embedded: 'always' } } });
            return get$(this, 'container').register('serializer:post', PostSerializer);
          });
          it('loads', function () {
            set$(get$(adapter, 'r'), 'GET:/posts/1', {
              posts: {
                id: 1,
                title: 'mvcc ftw',
                comments: [{
                    id: 2,
                    post: 1,
                    message: 'first'
                  }]
              }
            });
            return session.load(get$(this, 'Post'), 1).then(function (post) {
              var comment;
              get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
              get$(expect(get$(post, 'id')), 'to').eq('1');
              get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
              get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
              comment = get$(get$(post, 'comments'), 'firstObject');
              get$(expect(get$(comment, 'message')), 'to').eq('first');
              return get$(get$(get$(expect(get$(comment, 'post').isEqual(post)), 'to'), 'be'), 'true');
            });
          });
          it('updates child', function () {
            set$(get$(adapter, 'r'), 'GET:/posts/1', {
              posts: {
                id: 1,
                title: 'mvcc ftw',
                comments: [{
                    id: 2,
                    post: 1,
                    message: 'first'
                  }]
              }
            });
            set$(get$(adapter, 'r'), 'PUT:/posts/1', {
              posts: {
                id: 1,
                title: 'mvcc ftw',
                comments: [{
                    id: 2,
                    post: 1,
                    message: 'first again'
                  }]
              }
            });
            return session.load(get$(this, 'Post'), 1).then(function (post) {
              var comment;
              get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
              comment = get$(get$(post, 'comments'), 'firstObject');
              set$(comment, 'message', 'first again');
              return session.flush().then(function () {
                get$(expect(get$(get$(post, 'comments'), 'firstObject')), 'to').eq(comment);
                get$(expect(get$(comment, 'message')), 'to').eq('first again');
                return get$(expect(get$(adapter, 'h')), 'to').eql([
                  'GET:/posts/1',
                  'PUT:/posts/1'
                ]);
              });
            });
          });
          it('adds child', function () {
            var comment;
            set$(get$(adapter, 'r'), 'GET:/posts/1', {
              posts: {
                id: 1,
                title: 'mvcc ftw',
                comments: []
              }
            });
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
              return {
                posts: {
                  id: 1,
                  title: 'mvcc ftw',
                  comments: [{
                      id: 2,
                      client_id: get$(comment, 'clientId'),
                      post: 1,
                      message: 'reborn'
                    }]
                }
              };
            });
            comment = null;
            return session.load(get$(this, 'Post'), 1).then(function (post) {
              get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
              get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
              comment = session.create('comment', { message: 'reborn' });
              set$(comment, 'post', post);
              return session.flush().then(function () {
                get$(expect(get$(adapter, 'h')), 'to').eql([
                  'GET:/posts/1',
                  'PUT:/posts/1'
                ]);
                get$(expect(get$(comment, 'message')), 'to').eq('reborn');
                return get$(expect(get$(get$(post, 'comments'), 'firstObject')), 'to').eq(comment);
              });
            });
          });
          it('adds child with sibling', function () {
            var comment;
            set$(get$(adapter, 'r'), 'GET:/posts/1', {
              posts: {
                id: 1,
                title: 'mvcc ftw',
                comments: [{
                    id: 2,
                    post: 1,
                    message: 'first-born'
                  }]
              }
            });
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
              get$(get$(get$(expect(get$(get$(get$(get$(hash, 'data'), 'post'), 'comments')[1], 'id')), 'to'), 'be'), 'null');
              get$(expect(get$(get$(get$(get$(hash, 'data'), 'post'), 'comments')[0], 'message')), 'to').eq('first-born');
              return {
                posts: {
                  id: 1,
                  title: 'mvcc ftw',
                  comments: [
                    {
                      id: 2,
                      post: 1,
                      message: 'first-born'
                    },
                    {
                      id: 3,
                      client_id: get$(comment, 'clientId'),
                      post: 1,
                      message: 'second-born'
                    }
                  ]
                }
              };
            });
            comment = null;
            return session.load(get$(this, 'Post'), 1).then(function (post) {
              get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
              get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
              comment = session.create('comment', { message: 'second-born' });
              set$(comment, 'post', post);
              return session.flush().then(function () {
                get$(expect(get$(adapter, 'h')), 'to').eql([
                  'GET:/posts/1',
                  'PUT:/posts/1'
                ]);
                get$(expect(get$(comment, 'message')), 'to').eq('second-born');
                get$(expect(get$(get$(get$(post, 'comments'), 'firstObject'), 'message')), 'to').eq('first-born');
                return get$(expect(get$(get$(post, 'comments'), 'lastObject')), 'to').eq(comment);
              });
            });
          });
          it('deletes child', function () {
            var post;
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
              get$(expect(get$(get$(get$(get$(hash, 'data'), 'post'), 'comments'), 'length')), 'to').eq(0);
              return {
                posts: {
                  id: 1,
                  title: 'mvcc ftw',
                  comments: []
                }
              };
            });
            post = get$(this, 'Post').create({
              id: '1',
              title: 'parent',
              comments: []
            });
            get$(post, 'comments').addObject(get$(this, 'Comment').create({
              id: '2',
              message: 'child',
              post: post
            }));
            session.merge(post);
            return session.load('post', 1).then(function (post) {
              var comment;
              comment = get$(get$(post, 'comments'), 'firstObject');
              session.deleteModel(comment);
              get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
              return session.flush().then(function () {
                get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
                return get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
              });
            });
          });
          it('deletes child with sibling', function () {
            var post, sibling;
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function (url, type, hash) {
              get$(expect(get$(get$(get$(get$(hash, 'data'), 'post'), 'comments'), 'length')), 'to').eq(1);
              return {
                posts: {
                  id: 1,
                  title: 'mvcc ftw',
                  comments: [{
                      id: 3,
                      client_id: get$(sibling, 'clientId'),
                      post: 1,
                      message: 'child2'
                    }]
                }
              };
            });
            post = get$(this, 'Post').create({
              id: '1',
              title: 'parent',
              comments: []
            });
            get$(post, 'comments').addObject(get$(this, 'Comment').create({
              id: '2',
              message: 'child1',
              post: post
            }));
            get$(post, 'comments').addObject(get$(this, 'Comment').create({
              id: '3',
              message: 'child2',
              post: post
            }));
            session.merge(post);
            sibling = null;
            return session.load('post', 1).then(function (post) {
              var comment;
              comment = get$(get$(post, 'comments'), 'firstObject');
              sibling = get$(get$(post, 'comments'), 'lastObject');
              session.deleteModel(comment);
              get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
              return session.flush().then(function () {
                get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
                return get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
              });
            });
          });
          it('new parent creates and deletes child before flush', function () {
            var comment, post;
            set$(get$(adapter, 'r'), 'POST:/posts', function (url, type, hash) {
              get$(expect(get$(get$(get$(get$(hash, 'data'), 'post'), 'comments'), 'length')), 'to').eq(0);
              return {
                posts: {
                  client_id: get$(post, 'clientId'),
                  id: 1,
                  title: 'mvcc ftw',
                  comments: []
                }
              };
            });
            post = session.create(get$(this, 'Post'), {
              title: 'parent',
              comments: []
            });
            comment = session.create(get$(this, 'Comment'), { title: 'child' });
            get$(post, 'comments').pushObject(comment);
            get$(post, 'comments').removeObject(comment);
            return session.flush().then(function () {
              get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
              get$(get$(get$(expect(get$(post, 'isNew')), 'to'), 'be'), 'false');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts']);
            });
          });
          it('deletes multiple children in multiple flushes', function () {
            var post;
            post = get$(this, 'Post').create({
              id: '1',
              title: 'parent',
              comments: []
            });
            get$(post, 'comments').addObject(get$(this, 'Comment').create({
              id: '2',
              message: 'thing 1',
              post: post
            }));
            get$(post, 'comments').addObject(get$(this, 'Comment').create({
              id: '3',
              message: 'thing 2',
              post: post
            }));
            post = session.merge(post);
            set$(get$(adapter, 'r'), 'PUT:/posts/1', {
              posts: {
                id: 1,
                title: 'mvcc ftw',
                comments: [{
                    post: '1',
                    id: '3',
                    message: 'thing 2'
                  }]
              }
            });
            session.deleteModel(get$(post, 'comments').objectAt(0));
            return session.flush().then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
              get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
              session.deleteModel(get$(post, 'comments').objectAt(0));
              set$(get$(adapter, 'r'), 'PUT:/posts/1', {
                posts: {
                  id: 1,
                  title: 'mvcc ftw',
                  comments: []
                }
              });
              return session.flush().then(function () {
                get$(expect(get$(adapter, 'h')), 'to').eql([
                  'PUT:/posts/1',
                  'PUT:/posts/1'
                ]);
                return get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
              });
            });
          });
          return it('deletes parent and child', function () {
            var post;
            set$(get$(adapter, 'r'), 'DELETE:/posts/1', {});
            post = get$(this, 'Post').create({
              id: '1',
              title: 'parent',
              comments: []
            });
            get$(post, 'comments').addObject(get$(this, 'Comment').create({
              id: '2',
              message: 'child'
            }));
            session.merge(post);
            return session.load('post', 1).then(function (post) {
              session.deleteModel(post);
              return session.flush().then(function () {
                get$(expect(get$(adapter, 'h')), 'to').eql(['DELETE:/posts/1']);
                return get$(get$(get$(expect(get$(post, 'isDeleted')), 'to'), 'be'), 'true');
              });
            });
          });
        });
      });
    });
  });
define("epf-test/rest/rest.one_to_one",
  ["./_shared","epf/model/model","epf/model/attribute","epf/relationships/belongs_to","epf/serializers/model"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    var Model = __dependency2__["default"];
    var attr = __dependency3__["default"];
    var belongsTo = __dependency4__["default"];
    var ModelSerializer = __dependency5__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        return setup.apply(this);
      });
      context('one->one', function () {
        beforeEach(function () {
          set$(this, 'Post', Model.extend({ title: attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'User', Model.extend({
            name: attr('string'),
            post: belongsTo(get$(this, 'Post'))
          }));
          set$(get$(this, 'App'), 'User', get$(this, 'User'));
          get$(this, 'Post').reopen({ user: belongsTo(get$(this, 'User')) });
          get$(this, 'adapter').reopen({ configs: { post: { user: { owner: false } } } });
          adapter = get$(this, 'adapter');
          session = get$(this, 'session');
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:user', get$(this, 'User'));
        });
        it('child can be null', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            posts: {
              id: 1,
              title: 'mvcc ftw',
              user: null
            }
          });
          set$(get$(adapter, 'r'), 'PUT:/posts/1', {
            posts: {
              id: 1,
              title: 'new title',
              user: null
            }
          });
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            get$(get$(get$(expect(get$(post, 'user')), 'to'), 'be'), 'null');
            set$(post, 'title', 'new title');
            return session.flush().then(function () {
              return get$(expect(get$(post, 'title')), 'to').eq('new title');
            });
          });
        });
        it('loads lazily', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            posts: {
              id: 1,
              title: 'mvcc ftw',
              user: 2
            }
          });
          set$(get$(adapter, 'r'), 'GET:/users/2', {
            users: {
              id: 2,
              name: 'brogrammer',
              post: 1
            }
          });
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            var user;
            get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            user = get$(post, 'user');
            get$(expect(get$(user, 'id')), 'to').eq('2');
            get$(get$(get$(expect(get$(user, 'name')), 'to'), 'be'), 'undefined');
            return get$(post, 'user').load().then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql([
                'GET:/posts/1',
                'GET:/users/2'
              ]);
              get$(expect(get$(user, 'name')), 'to').eq('brogrammer');
              return get$(get$(get$(expect(get$(user, 'post').isEqual(post)), 'to'), 'be'), 'true');
            });
          });
        });
        it('deletes one side', function () {
          var post;
          set$(get$(adapter, 'r'), 'DELETE:/users/2', {});
          post = get$(this, 'Post').create({
            id: '1',
            title: 'parent'
          });
          set$(post, 'user', get$(this, 'User').create({
            id: '2',
            name: 'wes',
            post: post
          }));
          session.merge(post);
          return session.load('post', 1).then(function (post) {
            var user;
            user = get$(post, 'user');
            session.deleteModel(user);
            get$(get$(get$(expect(get$(post, 'user')), 'to'), 'be'), 'null');
            return session.flush().then(function () {
              get$(get$(get$(expect(get$(post, 'user')), 'to'), 'be'), 'null');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['DELETE:/users/2']);
            });
          });
        });
        it('deletes both', function () {
          var post;
          set$(get$(adapter, 'r'), 'DELETE:/posts/1', {});
          set$(get$(adapter, 'r'), 'DELETE:/users/2', {});
          post = get$(this, 'Post').create({
            id: '1',
            title: 'parent'
          });
          set$(post, 'user', get$(this, 'User').create({
            id: '2',
            name: 'wes',
            post: post
          }));
          session.merge(post);
          return session.load('post', 1).then(function (post) {
            var user;
            user = get$(post, 'user');
            session.deleteModel(user);
            session.deleteModel(post);
            return session.flush().then(function () {
              return get$(expect(get$(adapter, 'h')), 'to').eql([
                'DELETE:/users/2',
                'DELETE:/posts/1'
              ]);
            });
          });
        });
        it('creates on server', function () {
          var post;
          set$(get$(adapter, 'r'), 'POST:/posts', function () {
            return {
              posts: {
                client_id: get$(post, 'clientId'),
                id: 1,
                title: 'herp',
                user: 2
              }
            };
          });
          set$(get$(adapter, 'r'), 'GET:/users/2', {
            users: {
              id: 1,
              name: 'derp',
              post: 1
            }
          });
          post = session.create('post', { title: 'herp' });
          return session.flush().then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts']);
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('herp');
            return get$(get$(get$(get$(expect(get$(post, 'user')), 'to'), 'not'), 'be'), 'null');
          });
        });
        return it('creates on server and returns sideloaded', function () {
          var post;
          set$(get$(adapter, 'r'), 'POST:/posts', function () {
            return {
              users: {
                id: 2,
                name: 'derp',
                post: 1
              },
              posts: {
                client_id: get$(post, 'clientId'),
                id: 1,
                title: 'herp',
                user: 2
              }
            };
          });
          post = session.create('post', { title: 'herp' });
          return session.flush().then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts']);
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('herp');
            get$(get$(get$(get$(expect(get$(post, 'user')), 'to'), 'not'), 'be'), 'null');
            return get$(expect(get$(get$(post, 'user'), 'name')), 'to').eq('derp');
          });
        });
      });
      return context('one->one embedded', function () {
        beforeEach(function () {
          var PostSerializer;
          set$(this, 'Post', Model.extend({ title: attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'User', Model.extend({
            name: attr('string'),
            post: belongsTo(get$(this, 'Post'))
          }));
          set$(get$(this, 'App'), 'User', get$(this, 'User'));
          get$(this, 'Post').reopen({ user: belongsTo(get$(this, 'User')) });
          PostSerializer = ModelSerializer.extend({ properties: { user: { embedded: 'always' } } });
          adapter = get$(this, 'adapter');
          session = get$(this, 'session');
          get$(this, 'container').register('serializer:post', PostSerializer);
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:user', get$(this, 'User'));
        });
        it('creates child', function () {
          var post;
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
            return {
              posts: {
                id: 1,
                title: 'parent',
                user: {
                  client_id: get$(get$(post, 'user'), 'clientId'),
                  id: 2,
                  name: 'child',
                  post: 1
                }
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'parent'
          }));
          set$(post, 'user', session.create('user', { name: 'child' }));
          return session.flush().then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
            get$(get$(get$(expect(get$(get$(post, 'user'), 'isNew')), 'to'), 'be'), 'false');
            return get$(expect(get$(get$(post, 'user'), 'id')), 'to').eq('2');
          });
        });
        it('creates hierarchy', function () {
          var post;
          set$(get$(adapter, 'r'), 'POST:/posts', function () {
            return {
              posts: {
                client_id: get$(post, 'clientId'),
                id: 1,
                title: 'herp',
                user: {
                  client_id: get$(get$(post, 'user'), 'clientId'),
                  id: 1,
                  name: 'derp',
                  post: 1
                }
              }
            };
          });
          post = session.create('post', { title: 'herp' });
          set$(post, 'user', session.create('user', { name: 'derp' }));
          return session.flush().then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts']);
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('herp');
            return get$(expect(get$(get$(post, 'user'), 'name')), 'to').eq('derp');
          });
        });
        return it('deletes parent', function () {
          var post;
          set$(get$(adapter, 'r'), 'DELETE:/posts/1', {});
          post = get$(this, 'Post').create({
            id: '1',
            title: 'parent'
          });
          set$(post, 'user', get$(this, 'User').create({
            id: '2',
            name: 'wes'
          }));
          post = session.merge(post);
          session.deleteModel(post);
          return session.flush().then(function () {
            get$(expect(get$(adapter, 'h')), 'to').eql(['DELETE:/posts/1']);
            return get$(get$(get$(expect(get$(post, 'isDeleted')), 'to'), 'be'), 'true');
          });
        });
      });
    });
  });
define("epf-test/rest/rest.performance",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        session = get$(this, 'session');
        return set$(Ep, '__container__', get$(this, 'container'));
      });
      afterEach(function () {
        return delete Ep.__container__;
      });
      return context('many children', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({
            title: Ep.attr('string'),
            comments: Ep.hasMany('comment')
          }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'Comment', get$(Ep, 'Model').extend({
            message: Ep.attr('string'),
            post: Ep.belongsTo('post')
          }));
          set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        });
        it('loads model with many children to empty session fast', function () {
          var i, i$;
          this.slow(500);
          set$(get$(adapter, 'r'), 'GET:/posts', {
            posts: [{
                id: 1,
                title: 'is it fast?',
                rev: 1,
                comments: function () {
                  var accum$;
                  accum$ = [];
                  for (var i$ = 1; 1 <= 100 ? i$ <= 100 : i$ >= 100; 1 <= 100 ? ++i$ : --i$)
                    accum$.push(i$);
                  return accum$;
                }.apply(this, arguments)
              }],
            comments: function (accum$) {
              for (i$ = 1; i$ <= 100; ++i$) {
                i = i$;
                accum$.push({
                  id: i,
                  message: 'message' + i,
                  post: 1,
                  rev: 1
                });
              }
              return accum$;
            }.call(this, [])
          });
          return session.query('post').then(function (posts) {
            return get$(expect(get$(get$(posts[0], 'comments'), 'length')), 'to').eq(100);
          });
        });
        return it('loads model with many children repeatedly fast when rev is set', function () {
          var i, i$;
          this.slow(2500);
          set$(get$(adapter, 'r'), 'GET:/posts', {
            posts: [{
                id: 1,
                title: 'still fast?',
                rev: 1,
                comments: function () {
                  var accum$;
                  accum$ = [];
                  for (var i$ = 1; 1 <= 100 ? i$ <= 100 : i$ >= 100; 1 <= 100 ? ++i$ : --i$)
                    accum$.push(i$);
                  return accum$;
                }.apply(this, arguments)
              }],
            comments: function (accum$) {
              for (i$ = 1; i$ <= 100; ++i$) {
                i = i$;
                accum$.push({
                  id: i,
                  message: 'message' + i,
                  post: 1,
                  rev: 1
                });
              }
              return accum$;
            }.call(this, [])
          });
          return session.query('post').then(function (posts) {
            return session.query('post').then(function (posts) {
              return get$(expect(get$(get$(posts[0], 'comments'), 'length')), 'to').eq(100);
            });
          });
        });
      });
    });
  });
define("epf-test/rest/rest.rpc",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        return session = get$(this, 'session');
      });
      return context('rpc with simple model', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({
            title: Ep.attr('string'),
            submitted: Ep.attr('boolean')
          }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          return get$(this, 'container').register('model:post', get$(this, 'Post'));
        });
        it('works with loaded model as context', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/1/submit', function () {
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit').then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/1/submit']);
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              return get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
            });
          });
        });
        it('handles remote calls on the collection', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/randomize', function () {
            return {
              posts: [
                {
                  id: 1,
                  title: 'submitted',
                  submitted: true
                },
                {
                  id: 2,
                  title: 'submitted2',
                  submitted: true
                }
              ]
            };
          });
          return session.remoteCall('post', 'randomize').then(function (models) {
            get$(expect(get$(models, 'length')), 'to').eq(2);
            get$(expect(get$(get$(models, 'firstObject'), 'title')), 'to').eq('submitted');
            get$(get$(get$(expect(get$(get$(models, 'firstObject'), 'submitted')), 'to'), 'be'), 'true');
            return get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/randomize']);
          });
        });
        it('serializes model params', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/1/submit', function (url, type, hash) {
            get$(expect(get$(get$(get$(hash, 'data'), 'post'), 'title')), 'to').eq('test');
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', post).then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/1/submit']);
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              return get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
            });
          });
        });
        it('can accept model type as context', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/import', function () {
            return {
              posts: [{
                  id: 1,
                  title: 'submitted',
                  submitted: 'true'
                }]
            };
          });
          return session.remoteCall('post', 'import').then(function (posts) {
            get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/import']);
            return get$(expect(get$(get$(posts, 'firstObject'), 'id')), 'to').eq('1');
          });
        });
        it('can accept parameters', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/1/submit', function () {
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', { token: 'asd' }).then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/1/submit']);
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              return get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
            });
          });
        });
        it('passes through metadata', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/1/submit', function () {
            return {
              meta: { traffic: 'heavy' },
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', { token: 'asd' }).then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/1/submit']);
              get$(expect(get$(get$(post, 'meta'), 'traffic')), 'to').eq('heavy');
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              return get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
            });
          });
        });
        it('can accept a method', function () {
          set$(get$(adapter, 'r'), 'PUT:/posts/1/submit', function () {
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', { token: 'asd' }, { type: 'PUT' }).then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1/submit']);
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              return get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
            });
          });
        });
        it('when url option set, a custom url is used', function () {
          set$(get$(adapter, 'r'), 'POST:/greener_pastures', function () {
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', { token: 'asd' }, { url: '/greener_pastures' }).then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/greener_pastures']);
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              return get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
            });
          });
        });
        it('results in raw json when deserialize=false', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/1/submit', function () {
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', { token: 'asd' }, { deserialize: false }).then(function (json) {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/1/submit']);
              get$(expect(get$(post, 'title')), 'to').eq('test');
              get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'false');
              get$(expect(get$(get$(json, 'posts'), 'title')), 'to').eq('submitted');
              return get$(get$(get$(expect(get$(json, 'isModel')), 'to'), 'be'), 'undefined');
            });
          });
        });
        it('returns all models when deserializationContext is null', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/1/submit', function () {
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', { token: 'asd' }, { deserializationContext: null }).then(function (models) {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/1/submit']);
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
              return get$(expect(get$(models, 'firstObject')), 'to').eq(post);
            });
          });
        });
        it('returns all models of a type if deserializer context is a type key', function () {
          set$(get$(adapter, 'r'), 'POST:/posts/1/submit', function () {
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', { token: 'asd' }, { serializerOptions: { context: 'post' } }).then(function (models) {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/1/submit']);
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
              return get$(expect(get$(models, 'firstObject')), 'to').eq(post);
            });
          });
        });
        return it('returns all models of a type if context is a type', function () {
          var Post;
          set$(get$(adapter, 'r'), 'POST:/posts/1/submit', function () {
            return {
              posts: {
                id: 1,
                title: 'submitted',
                submitted: 'true'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test',
            submitted: false
          }));
          Post = get$(this, 'Post');
          return session.load('post', 1).then(function (post) {
            return session.remoteCall(post, 'submit', { token: 'asd' }, { serializerOptions: { context: Post } }).then(function (models) {
              get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts/1/submit']);
              get$(expect(get$(post, 'title')), 'to').eq('submitted');
              get$(get$(get$(expect(get$(post, 'submitted')), 'to'), 'be'), 'true');
              return get$(expect(get$(models, 'firstObject')), 'to').eq(post);
            });
          });
        });
      });
    });
  });
define("epf-test/rest/rest.serialization",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('rest serialization', function () {
      beforeEach(function () {
        setup.apply(this);
        return set$(this, 'serializer', get$(this, 'adapter').serializerFor('payload'));
      });
      context('simple model', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({
            title: Ep.attr('string'),
            longTitle: Ep.attr('string')
          }));
          return get$(this, 'container').register('model:post', get$(this, 'Post'));
        });
        describe("overriding a serializer's typeKey", function () {
          return it('returns a model of that type', function () {
            var data, models, post, SpecialPostSerializer;
            SpecialPostSerializer = get$(Ep, 'ModelSerializer').extend({ typeKey: 'post' });
            get$(this, 'container').register('serializer:special_post', SpecialPostSerializer);
            data = {
              special_posts: [{
                  id: 1,
                  title: 'wat',
                  user: null
                }]
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            return get$(get$(get$(expect(post), 'to'), 'be'), 'an')['instanceof'](get$(this, 'Post'));
          });
        });
        describe('deserialize', function () {
          it('reads plural hash key', function () {
            var data, models, post;
            data = {
              posts: {
                id: 1,
                title: 'wat',
                long_title: 'wat omgawd'
              }
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            get$(get$(get$(expect(post), 'to'), 'be'), 'an')['instanceof'](get$(this, 'Post'));
            get$(expect(get$(post, 'title')), 'to').eq('wat');
            get$(expect(get$(post, 'longTitle')), 'to').eq('wat omgawd');
            return get$(expect(get$(post, 'id')), 'to').eq('1');
          });
          it('reads singular hash key', function () {
            var data, models, post;
            data = {
              post: {
                id: 1,
                title: 'wat',
                long_title: 'wat omgawd'
              }
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            get$(get$(get$(expect(post), 'to'), 'be'), 'an')['instanceof'](get$(this, 'Post'));
            get$(expect(get$(post, 'title')), 'to').eq('wat');
            get$(expect(get$(post, 'longTitle')), 'to').eq('wat omgawd');
            return get$(expect(get$(post, 'id')), 'to').eq('1');
          });
          it('reads array value', function () {
            var data, models, post;
            data = {
              post: [{
                  id: 1,
                  title: 'wat',
                  long_title: 'wat omgawd'
                }]
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            get$(get$(get$(expect(post), 'to'), 'be'), 'an')['instanceof'](get$(this, 'Post'));
            get$(expect(get$(post, 'title')), 'to').eq('wat');
            get$(expect(get$(post, 'longTitle')), 'to').eq('wat omgawd');
            return get$(expect(get$(post, 'id')), 'to').eq('1');
          });
          it('obeys custom keys', function () {
            var data, models, post, PostSerializer;
            PostSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { title: { key: 'POST_TITLE' } } });
            get$(this, 'container').register('serializer:post', PostSerializer);
            data = {
              post: {
                id: 1,
                POST_TITLE: 'wat',
                long_title: 'wat omgawd'
              }
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            get$(get$(get$(expect(post), 'to'), 'be'), 'an')['instanceof'](get$(this, 'Post'));
            get$(expect(get$(post, 'title')), 'to').eq('wat');
            get$(expect(get$(post, 'longTitle')), 'to').eq('wat omgawd');
            return get$(expect(get$(post, 'id')), 'to').eq('1');
          });
          it('reifies client_id', function () {
            var data, models, post;
            data = {
              posts: {
                client_id: null,
                id: 1,
                title: 'wat',
                long_title: 'wat omgawd'
              }
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            return get$(get$(get$(get$(expect(get$(post, 'clientId')), 'to'), 'not'), 'be'), 'null');
          });
          it('reads revs', function () {
            var data, models, post;
            data = {
              posts: {
                rev: 123,
                client_rev: 321,
                client_id: 1,
                id: 1,
                title: 'wat',
                long_title: 'wat omgawd'
              }
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            get$(expect(get$(post, 'rev')), 'to').eq(123);
            return get$(expect(get$(post, 'clientRev')), 'to').eq(321);
          });
          return it('respects aliases', function () {
            var data, models, post;
            get$(this, 'serializer').reopen({ aliases: { blog_post: 'post' } });
            data = {
              blog_post: {
                id: 1,
                title: 'wat',
                long_title: 'wat omgawd'
              }
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            get$(get$(get$(expect(post), 'to'), 'be'), 'an')['instanceof'](get$(this, 'Post'));
            get$(expect(get$(post, 'title')), 'to').eq('wat');
            get$(expect(get$(post, 'longTitle')), 'to').eq('wat omgawd');
            return get$(expect(get$(post, 'id')), 'to').eq('1');
          });
        });
        return describe('serialization', function () {
          beforeEach(function () {
            return set$(this, 'serializer', get$(this, 'adapter').serializerFor('post'));
          });
          it('serializes', function () {
            var data, post;
            post = get$(this, 'Post').create({
              id: 1,
              clientId: '2',
              title: 'wat',
              longTitle: 'wat omgawd',
              rev: 123,
              clientRev: 321
            });
            data = get$(this, 'serializer').serialize(post);
            return get$(expect(data), 'to').eql({
              client_id: '2',
              id: 1,
              title: 'wat',
              long_title: 'wat omgawd',
              rev: 123,
              client_rev: 321
            });
          });
          return it('obeys custom keys', function () {
            var data, post;
            get$(this, 'serializer').reopen({ properties: { title: { key: 'POST_TITLE' } } });
            post = get$(this, 'Post').create();
            set$(post, 'id', 1);
            set$(post, 'clientId', '2');
            set$(post, 'title', 'wat');
            set$(post, 'longTitle', 'wat omgawd');
            data = get$(this, 'serializer').serialize(post);
            return get$(expect(data), 'to').eql({
              client_id: '2',
              id: 1,
              POST_TITLE: 'wat',
              long_title: 'wat omgawd'
            });
          });
        });
      });
      context('model with raw and object properties', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({
            title: Ep.attr(),
            object: Ep.attr()
          }));
          return get$(this, 'container').register('model:post', get$(this, 'Post'));
        });
        describe('deserialize', function () {
          return it('deserializes', function () {
            var data, models, post;
            data = {
              posts: {
                id: 1,
                title: 'wat',
                object: { prop: 'sup' }
              }
            };
            models = get$(this, 'serializer').deserialize(data);
            post = models[0];
            get$(get$(get$(expect(post), 'to'), 'be'), 'an')['instanceof'](get$(this, 'Post'));
            get$(expect(get$(post, 'title')), 'to').eq('wat');
            get$(expect(get$(get$(post, 'object'), 'prop')), 'to').eq('sup');
            return get$(expect(get$(post, 'id')), 'to').eq('1');
          });
        });
        return describe('serialization', function () {
          beforeEach(function () {
            return set$(this, 'serializer', get$(this, 'adapter').serializerFor('post'));
          });
          it('serializes object', function () {
            var data, post;
            post = get$(this, 'Post').create({
              id: 1,
              clientId: '2',
              title: 'wat',
              object: { prop: 'sup' }
            });
            data = get$(this, 'serializer').serialize(post);
            return get$(expect(data), 'to').eql({
              client_id: '2',
              id: 1,
              title: 'wat',
              object: { prop: 'sup' }
            });
          });
          it('serializes array', function () {
            var data, post;
            post = get$(this, 'Post').create({
              id: 1,
              clientId: '2',
              title: 'wat',
              object: ['asd']
            });
            data = get$(this, 'serializer').serialize(post);
            return get$(expect(data), 'to').eql({
              client_id: '2',
              id: 1,
              title: 'wat',
              object: ['asd']
            });
          });
          it('serializes empty array', function () {
            var data, post;
            post = get$(this, 'Post').create({
              id: 1,
              clientId: '2',
              title: 'wat',
              object: []
            });
            data = get$(this, 'serializer').serialize(post);
            return get$(expect(data), 'to').eql({
              client_id: '2',
              id: 1,
              title: 'wat',
              object: []
            });
          });
          return it('serializes complex object', function () {
            var data, post;
            post = get$(this, 'Post').create({
              id: 1,
              clientId: '2',
              title: 'wat',
              object: {
                tags: [
                  'ruby',
                  'java'
                ]
              }
            });
            data = get$(this, 'serializer').serialize(post);
            return get$(expect(data), 'to').eql({
              client_id: '2',
              id: 1,
              title: 'wat',
              object: {
                tags: [
                  'ruby',
                  'java'
                ]
              }
            });
          });
        });
      });
      context('one->many', function () {
        beforeEach(function () {
          set$(this, 'App', Ember.Namespace.create());
          set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'Comment', get$(Ep, 'Model').extend({ post: Ep.belongsTo(get$(this, 'Post')) }));
          set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
          get$(this, 'Post').reopen({ comments: Ep.hasMany(get$(this, 'Comment')) });
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        });
        it('deserializes null hasMany', function () {
          var data, models, post;
          data = {
            post: [{
                id: 1,
                title: 'wat',
                comments: null
              }]
          };
          models = get$(this, 'serializer').deserialize(data);
          post = models[0];
          return get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(0);
        });
        return it('deserializes null belongsTo', function () {
          var comment, data, models;
          data = {
            comments: [{
                id: 1,
                title: 'wat',
                post: null
              }]
          };
          models = get$(this, 'serializer').deserialize(data);
          comment = models[0];
          return get$(get$(get$(expect(get$(comment, 'post')), 'to'), 'be'), 'null');
        });
      });
      context('one->many embedded', function () {
        beforeEach(function () {
          var PostSerializer;
          set$(this, 'App', Ember.Namespace.create());
          set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'Comment', get$(Ep, 'Model').extend({ post: Ep.belongsTo(get$(this, 'Post')) }));
          set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
          get$(this, 'Post').reopen({ comments: Ep.hasMany(get$(this, 'Comment')) });
          PostSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { comments: { embedded: 'always' } } });
          get$(this, 'container').register('serializer:post', PostSerializer);
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        });
        return it('deserializes null belongsTo', function () {
          var comment, data, models;
          data = {
            comments: [{
                id: 1,
                title: 'wat',
                post: null
              }]
          };
          models = get$(this, 'serializer').deserialize(data);
          comment = models[0];
          return get$(get$(get$(expect(get$(comment, 'post')), 'to'), 'be'), 'null');
        });
      });
      return context('one->one embedded', function () {
        beforeEach(function () {
          var PostSerializer;
          set$(this, 'App', Ember.Namespace.create());
          set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'User', get$(Ep, 'Model').extend({
            name: Ep.attr('string'),
            post: Ep.belongsTo(get$(this, 'Post'))
          }));
          set$(get$(this, 'App'), 'User', get$(this, 'User'));
          get$(this, 'Post').reopen({ user: Ep.belongsTo(get$(this, 'User')) });
          PostSerializer = get$(Ep, 'ModelSerializer').extend({ properties: { user: { embedded: 'always' } } });
          get$(this, 'container').register('serializer:post', PostSerializer);
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:user', get$(this, 'User'));
        });
        return it('deserializes null belongsTo', function () {
          var data, models, post;
          data = {
            posts: [{
                id: 1,
                title: 'wat',
                user: null
              }]
          };
          models = get$(this, 'serializer').deserialize(data);
          post = models[0];
          return get$(get$(get$(expect(get$(post, 'user')), 'to'), 'be'), 'null');
        });
      });
    });
  });
define("epf-test/rest/rest.sideloading",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        return session = get$(this, 'session');
      });
      return describe('sideloading', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          set$(this, 'Comment', get$(Ep, 'Model').extend({
            message: Ep.attr('string'),
            post: Ep.belongsTo(get$(this, 'Post'))
          }));
          set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
          get$(this, 'Post').reopen({ comments: Ep.hasMany(get$(this, 'Comment')) });
          get$(this, 'container').register('model:post', get$(this, 'Post'));
          return get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        });
        return it('sideloads', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            posts: {
              id: '1',
              title: 'sideload my children',
              comments: [
                2,
                3
              ]
            },
            comments: [
              {
                id: '2',
                message: 'here we',
                post: '1'
              },
              {
                id: '3',
                message: 'are',
                post: '1'
              }
            ]
          });
          return session.load('post', 1).then(function (post) {
            get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
            get$(expect(get$(get$(get$(post, 'comments'), 'firstObject'), 'message')), 'to').eq('here we');
            return get$(expect(get$(get$(get$(post, 'comments'), 'lastObject'), 'message')), 'to').eq('are');
          });
        });
      });
    });
  });
define("epf-test/rest/rest.simple",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('rest', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        return session = get$(this, 'session');
      });
      return context('simple model', function () {
        beforeEach(function () {
          set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
          set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
          return get$(this, 'container').register('model:post', get$(this, 'Post'));
        });
        it('loads', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            posts: {
              id: 1,
              title: 'mvcc ftw'
            }
          });
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            return get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
          });
        });
        it('saves', function () {
          var post;
          set$(get$(adapter, 'r'), 'POST:/posts', function () {
            return {
              posts: {
                client_id: get$(post, 'clientId'),
                id: 1,
                title: 'mvcc ftw'
              }
            };
          });
          post = session.create('post');
          set$(post, 'title', 'mvcc ftw');
          return session.flush().then(function () {
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            return get$(expect(get$(adapter, 'h')), 'to').eql(['POST:/posts']);
          });
        });
        it('updates', function () {
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
            return {
              posts: {
                id: 1,
                title: 'updated'
              }
            };
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          return session.load('post', 1).then(function (post) {
            get$(expect(get$(post, 'title')), 'to').eq('test');
            set$(post, 'title', 'updated');
            return session.flush().then(function () {
              get$(expect(get$(post, 'title')), 'to').eq('updated');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
            });
          });
        });
        it('updates multiple times', function () {
          var post;
          set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
            return {
              posts: {
                id: 1,
                title: 'updated'
              }
            };
          });
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          get$(expect(get$(post, 'title')), 'to').eq('test');
          set$(post, 'title', 'updated');
          return session.flush().then(function () {
            get$(expect(get$(post, 'title')), 'to').eq('updated');
            get$(expect(get$(adapter, 'h')), 'to').eql(['PUT:/posts/1']);
            set$(get$(adapter, 'r'), 'PUT:/posts/1', function () {
              return {
                posts: {
                  id: 1,
                  title: 'updated again'
                }
              };
            });
            set$(post, 'title', 'updated again');
            return session.flush().then(function () {
              get$(expect(get$(post, 'title')), 'to').eq('updated again');
              get$(expect(get$(adapter, 'h')), 'to').eql([
                'PUT:/posts/1',
                'PUT:/posts/1'
              ]);
              return session.flush().then(function () {
                get$(expect(get$(post, 'title')), 'to').eq('updated again');
                return get$(expect(get$(adapter, 'h')), 'to').eql([
                  'PUT:/posts/1',
                  'PUT:/posts/1'
                ]);
              });
            });
          });
        });
        it('deletes', function () {
          set$(get$(adapter, 'r'), 'DELETE:/posts/1', {});
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          return session.load('post', 1).then(function (post) {
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('test');
            session.deleteModel(post);
            return session.flush().then(function () {
              get$(get$(get$(expect(get$(post, 'isDeleted')), 'to'), 'be'), 'true');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['DELETE:/posts/1']);
            });
          });
        });
        it('deletes multiple times in multiple flushes', function () {
          var post1, post2;
          set$(get$(adapter, 'r'), 'DELETE:/posts/1', {});
          post1 = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'thing 1'
          }));
          post2 = session.merge(get$(this, 'Post').create({
            id: '2',
            title: 'thing 2'
          }));
          session.deleteModel(post1);
          return session.flush().then(function () {
            get$(get$(get$(expect(get$(post1, 'isDeleted')), 'to'), 'be'), 'true');
            get$(get$(get$(expect(get$(post2, 'isDeleted')), 'to'), 'be'), 'false');
            set$(get$(adapter, 'r'), 'DELETE:/posts/1', function () {
              throw 'already deleted';
            });
            set$(get$(adapter, 'r'), 'DELETE:/posts/2', {});
            session.deleteModel(post2);
            return session.flush().then(function () {
              get$(get$(get$(expect(get$(post1, 'isDeleted')), 'to'), 'be'), 'true');
              return get$(get$(get$(expect(get$(post2, 'isDeleted')), 'to'), 'be'), 'true');
            });
          });
        });
        it('creates, deletes, creates, deletes', function () {
          var post1;
          post1 = session.create('post');
          set$(post1, 'title', 'thing 1');
          set$(get$(adapter, 'r'), 'POST:/posts', function () {
            return {
              posts: {
                client_id: get$(post1, 'clientId'),
                id: 1,
                title: 'thing 1'
              }
            };
          });
          return session.flush().then(function () {
            get$(expect(get$(post1, 'id')), 'to').eq('1');
            get$(expect(get$(post1, 'title')), 'to').eq('thing 1');
            session.deleteModel(post1);
            set$(get$(adapter, 'r'), 'DELETE:/posts/1', {});
            return session.flush().then(function () {
              var post2;
              get$(get$(get$(expect(get$(post1, 'isDeleted')), 'to'), 'be'), 'true');
              post2 = session.create('post');
              set$(post2, 'title', 'thing 2');
              set$(get$(adapter, 'r'), 'POST:/posts', function () {
                return {
                  posts: {
                    client_id: get$(post2, 'clientId'),
                    id: 2,
                    title: 'thing 2'
                  }
                };
              });
              return session.flush().then(function () {
                set$(get$(adapter, 'r'), 'DELETE:/posts/1', function () {
                  throw 'not found';
                });
                set$(get$(adapter, 'r'), 'DELETE:/posts/2', {});
                get$(expect(get$(post2, 'id')), 'to').eq('2');
                get$(expect(get$(post2, 'title')), 'to').eq('thing 2');
                session.deleteModel(post2);
                return session.flush().then(function () {
                  get$(get$(get$(expect(get$(post2, 'isDeleted')), 'to'), 'be'), 'true');
                  return get$(expect(get$(adapter, 'h')), 'to').eql([
                    'POST:/posts',
                    'DELETE:/posts/1',
                    'POST:/posts',
                    'DELETE:/posts/2'
                  ]);
                });
              });
            });
          });
        });
        it('refreshes', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            posts: {
              id: 1,
              title: 'something new'
            }
          });
          session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            get$(expect(get$(post, 'title')), 'to').eq('test');
            get$(expect(get$(adapter, 'h')), 'to').eql([]);
            return session.refresh(post).then(function (post) {
              get$(expect(get$(post, 'title')), 'to').eq('something new');
              return get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
            });
          });
        });
        it('finds', function () {
          set$(get$(adapter, 'r'), 'GET:/posts', function (url, type, hash) {
            get$(expect(get$(hash, 'data')), 'to').eql({ q: 'aardvarks' });
            return {
              posts: [
                {
                  id: 1,
                  title: 'aardvarks explained'
                },
                {
                  id: 2,
                  title: 'aardvarks in depth'
                }
              ]
            };
          });
          return session.find('post', { q: 'aardvarks' }).then(function (models) {
            get$(expect(get$(models, 'length')), 'to').eq(2);
            return get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts']);
          });
        });
        it('loads then updates', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', {
            posts: {
              id: 1,
              title: 'mvcc ftw'
            }
          });
          set$(get$(adapter, 'r'), 'PUT:/posts/1', {
            posts: {
              id: 1,
              title: 'no more fsm'
            }
          });
          return session.load(get$(this, 'Post'), 1).then(function (post) {
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
            set$(post, 'title', 'no more fsm');
            return session.flush().then(function () {
              get$(expect(get$(adapter, 'h')), 'to').eql([
                'GET:/posts/1',
                'PUT:/posts/1'
              ]);
              return get$(expect(get$(post, 'title')), 'to').eq('no more fsm');
            });
          });
        });
        return it('loads with parameter', function () {
          set$(get$(adapter, 'r'), 'GET:/posts/1', function (url, type, hash) {
            get$(expect(get$(get$(hash, 'data'), 'invite_token')), 'to').eq('fdsavcxz');
            return {
              posts: {
                id: 1,
                title: 'mvcc ftw'
              }
            };
          });
          return session.load(get$(this, 'Post'), 1, { params: { invite_token: 'fdsavcxz' } }).then(function (post) {
            get$(expect(get$(post, 'id')), 'to').eq('1');
            get$(expect(get$(post, 'title')), 'to').eq('mvcc ftw');
            return get$(expect(get$(adapter, 'h')), 'to').eql(['GET:/posts/1']);
          });
        });
      });
    });
  });
define("epf-test/rest/rest_adapter",
  ["./_shared"],
  function(__dependency1__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var setup = __dependency1__["default"];
    describe('Ep.RestAdapter', function () {
      var adapter, session;
      adapter = null;
      session = null;
      beforeEach(function () {
        setup.apply(this);
        adapter = get$(this, 'adapter');
        session = get$(this, 'session');
        set$(Ep, '__container__', get$(this, 'container'));
        set$(this, 'Post', get$(Ep, 'Model').extend({
          title: Ep.attr('string'),
          comments: Ep.hasMany('comment')
        }));
        set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
        get$(this, 'container').register('model:post', get$(this, 'Post'));
        set$(this, 'Comment', get$(Ep, 'Model').extend({
          body: Ep.attr('string'),
          post: Ep.belongsTo('post')
        }));
        set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
        return get$(this, 'container').register('model:comment', get$(this, 'Comment'));
      });
      afterEach(function () {
        return delete Ep.__container__;
      });
      return describe('.mergePayload', function () {
        var data;
        data = {
          post: {
            id: 1,
            title: 'ma post',
            comments: [
              2,
              3
            ]
          },
          comments: [
            {
              id: 2,
              body: 'yo'
            },
            {
              id: 3,
              body: 'sup'
            }
          ]
        };
        it('should merge with typeKey as context', function () {
          var post;
          post = get$(adapter.mergePayload(data, 'post', session), 'firstObject');
          get$(expect(get$(post, 'title')), 'to').eq('ma post');
          return get$(expect(post), 'to').eq(session.getModel(post));
        });
        return it('should merge with no context', function () {
          var models;
          models = adapter.mergePayload(data, null, session);
          return get$(expect(get$(models, 'length')), 'to').eq(3);
        });
      });
    });
  });
define("epf-test/serializers/model",
  [],
  function() {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    describe('Ep.ModelSerializer', function () {
      var App, serializer, session;
      App = null;
      session = null;
      serializer = null;
      beforeEach(function () {
        App = Ember.Namespace.create();
        set$(App, 'User', get$(Ep, 'Model').extend({
          name: Ep.attr('string'),
          postCount: Ep.attr('number', { transient: true })
        }));
        set$(App, 'UserSerializer', get$(Ep, 'ModelSerializer').extend({ typeKey: 'user' }));
        set$(this, 'container', new Ember.Container);
        Ep.setupContainer(get$(this, 'container'));
        get$(this, 'container').register('model:user', get$(App, 'User'));
        get$(this, 'container').register('serializer:user', get$(App, 'UserSerializer'));
        session = get$(this, 'container').lookup('session:main');
        return serializer = get$(this, 'container').lookup('serializer:user');
      });
      describe('.deserialize', function () {
        return it('includes transient properties', function () {
          var data, user;
          data = {
            id: 1,
            name: 'Bro',
            post_count: 12
          };
          user = serializer.deserialize(data);
          return get$(expect(get$(user, 'postCount')), 'to').eq(12);
        });
      });
      return describe('.serialize', function () {
        return it('does not include transient properties', function () {
          var data, user;
          user = session.build('user', {
            id: 1,
            name: 'Bro',
            postCount: 12
          });
          data = serializer.serialize(user);
          return get$(get$(get$(expect(get$(data, 'post_count')), 'to'), 'be'), 'undefined');
        });
      });
    });
  });
define("epf-test/session/child_session",
  ["epf/model/model","epf/model/attribute","epf/relationships/belongs_to","epf/relationships/has_many","epf/serializers/model","epf/setup_container"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var Model = __dependency1__["default"];
    var attr = __dependency2__["default"];
    var belongsTo = __dependency3__["default"];
    var hasMany = __dependency4__["default"];
    var ModelSerializer = __dependency5__["default"];
    var setupContainer = __dependency6__["default"];
    describe('ChildSession', function () {
      var adapter, Comment, parent, Post, session;
      parent = null;
      session = null;
      adapter = null;
      Post = null;
      Comment = null;
      beforeEach(function () {
        set$(this, 'App', Ember.Namespace.create());
        set$(this, 'container', new Ember.Container);
        set$(Ep, '__container__', get$(this, 'container'));
        setupContainer(get$(this, 'container'));
        Post = Model.extend({
          title: attr('string'),
          comments: hasMany('comment')
        });
        set$(get$(this, 'App'), 'Post', Post);
        Comment = Model.extend({ post: belongsTo('post') });
        set$(get$(this, 'App'), 'Comment', Comment);
        get$(this, 'container').register('model:post', Post);
        get$(this, 'container').register('model:comment', Comment);
        adapter = get$(this, 'container').lookup('adapter:main');
        parent = adapter.newSession();
        return session = parent.newSession();
      });
      afterEach(function () {
        return delete Ep.__container__;
      });
      describe('.query', function () {
        return it('queries', function () {
          set$(adapter, 'query', function (type, query) {
            get$(expect(query), 'to').eql({ q: 'herpin' });
            return Ember.RSVP.resolve([
              Post.create({
                id: '1',
                title: 'herp'
              }),
              Post.create({
                id: '2',
                title: 'derp'
              })
            ]);
          });
          return session.query('post', { q: 'herpin' }).then(function (models) {
            return get$(expect(get$(models, 'length')), 'to').eq(2);
          });
        });
      });
      describe('.load', function () {
        return it('loads from parent session', function () {
          parent.merge(Post.create({
            id: '1',
            title: 'flash gordon'
          }));
          return session.load(Post, 1).then(function (post) {
            get$(get$(expect(post), 'to'), 'not').eq(parent.getModel(post));
            return get$(expect(get$(post, 'title')), 'to').eq('flash gordon');
          });
        });
      });
      return describe('.add', function () {
        return it('includes lazy relationships', function () {
          var comment, parentComment;
          parentComment = parent.merge(Comment.create({
            id: '1',
            post: Post.create({ id: '2' })
          }));
          comment = session.add(parentComment);
          get$(get$(expect(comment), 'to'), 'not').eq(parentComment);
          get$(get$(get$(get$(expect(get$(comment, 'post')), 'to'), 'not'), 'be'), 'bull');
          return get$(expect(get$(get$(comment, 'post'), 'session')), 'to').eq(session);
        });
      });
    });
  });
define("epf-test/session/session.flushing",
  [],
  function() {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    describe('Ep.Session', function () {
      var session;
      session = null;
      beforeEach(function () {
        set$(this, 'App', Ember.Namespace.create());
        set$(this, 'container', new Ember.Container);
        Ep.setupContainer(get$(this, 'container'));
        get$(this, 'container').register('adapter:main', get$(Ep, 'LocalAdapter'));
        set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
        set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
        get$(this, 'container').register('model:post', get$(this, 'Post'));
        set$(this, 'adapter', get$(this, 'container').lookup('adapter:main'));
        return session = get$(this, 'adapter').newSession();
      });
      return describe('flushing', function () {
        return it('can update while flush is pending', function () {
          var f1, post;
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'original'
          }));
          set$(post, 'title', 'update 1');
          f1 = session.flush();
          set$(post, 'title', 'update 2');
          get$(expect(get$(post, 'title')), 'to').eq('update 2');
          return f1.then(function () {
            get$(expect(get$(post, 'title')), 'to').eq('update 2');
            set$(post, 'title', 'update 3');
            return session.flush().then(function () {
              return get$(expect(get$(post, 'title')), 'to').eq('update 3');
            });
          });
        });
      });
    });
  });
define("epf-test/session/session.hierarchy",
  [],
  function() {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    describe('Ep.Session', function () {
      beforeEach(function () {
        set$(this, 'App', Ember.Namespace.create());
        set$(this, 'container', new Ember.Container);
        Ep.setupContainer(get$(this, 'container'));
        get$(this, 'container').register('adapter:main', get$(Ep, 'LocalAdapter'));
        set$(this, 'Post', get$(Ep, 'Model').extend({ title: Ep.attr('string') }));
        set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
        set$(this, 'Comment', get$(Ep, 'Model').extend({
          text: Ep.attr('string'),
          post: Ep.belongsTo(get$(this, 'Post'))
        }));
        set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
        get$(this, 'Post').reopen({ comments: Ep.hasMany(get$(this, 'Comment')) });
        get$(this, 'container').register('model:post', get$(this, 'Post'));
        get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        set$(this, 'adapter', get$(this, 'container').lookup('adapter:main'));
        return set$(this, 'container', get$(get$(this, 'adapter'), 'container'));
      });
      describe('sibling sessions', function () {
        var adapter, sessionA, sessionB;
        sessionA = null;
        sessionB = null;
        adapter = null;
        beforeEach(function () {
          sessionA = get$(this, 'adapter').newSession();
          sessionB = get$(this, 'adapter').newSession();
          sessionA.merge(get$(this, 'Post').create({
            id: '1',
            title: 'original'
          }));
          return sessionB.merge(get$(this, 'Post').create({
            id: '1',
            title: 'original'
          }));
        });
        return it('updates are isolated', function () {
          var pA, pB, postA, postB;
          postA = null;
          postB = null;
          pA = sessionA.load('post', 1).then(function (post) {
            postA = post;
            return set$(postA, 'title', 'a was here');
          });
          pB = sessionB.load('post', 1).then(function (post) {
            postB = post;
            return set$(postB, 'title', 'b was here');
          });
          return Ember.RSVP.all([
            pA,
            pB
          ]).then(function () {
            get$(expect(get$(postA, 'title')), 'to').eq('a was here');
            return get$(expect(get$(postB, 'title')), 'to').eq('b was here');
          });
        });
      });
      return describe('child session', function () {
        var child, parent;
        parent = null;
        child = null;
        beforeEach(function () {
          parent = get$(this, 'adapter').newSession();
          return child = parent.newSession();
        });
        it('.flushIntoParent flushes updates immediately', function () {
          parent.merge(get$(this, 'Post').create({
            id: '1',
            title: 'original'
          }));
          return child.load('post', 1).then(function (childPost) {
            set$(childPost, 'title', 'child version');
            return parent.load('post', 1).then(function (parentPost) {
              var f;
              get$(expect(get$(parentPost, 'title')), 'to').eq('original');
              f = child.flushIntoParent();
              get$(expect(get$(parentPost, 'title')), 'to').eq('child version');
              return f;
            });
          });
        });
        it('.flush waits for success before updating parent', function () {
          parent.merge(get$(this, 'Post').create({
            id: '1',
            title: 'original'
          }));
          return child.load('post', 1).then(function (childPost) {
            set$(childPost, 'title', 'child version');
            return parent.load('post', 1).then(function (parentPost) {
              var f;
              get$(expect(get$(parentPost, 'title')), 'to').eq('original');
              f = child.flush();
              get$(expect(get$(parentPost, 'title')), 'to').eq('original');
              return f.then(function () {
                return get$(expect(get$(parentPost, 'title')), 'to').eq('child version');
              });
            });
          });
        });
        it('does not mutate parent session relationships', function () {
          var post;
          post = parent.merge(get$(this, 'Post').create({
            id: '1',
            title: 'parent',
            comments: [get$(this, 'Comment').create({
                id: '2',
                post: get$(this, 'Post').create({ id: '1' })
              })]
          }));
          get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
          child.add(post);
          return get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
        });
        return it('adds hasMany correctly', function () {
          var parentPost, post;
          parentPost = parent.merge(get$(this, 'Post').create({
            id: '1',
            title: 'parent',
            comments: [get$(this, 'Comment').create({
                id: '2',
                post: get$(this, 'Post').create({ id: '1' })
              })]
          }));
          post = child.add(parentPost);
          get$(get$(expect(post), 'to'), 'not').eq(parentPost);
          get$(expect(get$(get$(post, 'comments'), 'length')), 'to').eq(1);
          return get$(get$(expect(get$(get$(post, 'comments'), 'firstObject')), 'to'), 'not').eq(get$(parentPost, 'firstObject'));
        });
      });
    });
  });
define("epf-test/session/session",
  ["epf/model/model","epf/model/attribute","epf/relationships/belongs_to","epf/relationships/has_many","epf/serializers/model"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var get$ = Ember.get;
    var set$ = Ember.set;
    var Model = __dependency1__["default"];
    var attr = __dependency2__["default"];
    var belongsTo = __dependency3__["default"];
    var hasMany = __dependency4__["default"];
    var ModelSerializer = __dependency5__["default"];
    describe('Session', function () {
      var adapter, session;
      session = null;
      adapter = null;
      beforeEach(function () {
        set$(this, 'App', Ember.Namespace.create());
        set$(this, 'container', new Ember.Container);
        Ep.setupContainer(get$(this, 'container'));
        set$(this, 'Post', Model.extend({ title: attr('string') }));
        set$(get$(this, 'App'), 'Post', get$(this, 'Post'));
        set$(this, 'Comment', Model.extend({
          body: attr('string'),
          post: Ep.belongsTo(get$(this, 'Post'))
        }));
        set$(get$(this, 'App'), 'Comment', get$(this, 'Comment'));
        get$(this, 'Post').reopen({ comments: Ep.hasMany(get$(this, 'Comment')) });
        get$(this, 'container').register('model:post', get$(this, 'Post'));
        get$(this, 'container').register('model:comment', get$(this, 'Comment'));
        adapter = get$(this, 'container').lookup('adapter:main');
        set$(this, 'container', get$(adapter, 'container'));
        return session = adapter.newSession();
      });
      afterEach(function () {
        return session.destroy();
      });
      describe('.build', function () {
        it('instantiates a model', function () {
          var post;
          post = session.build('post');
          get$(get$(get$(get$(expect(post), 'to'), 'not'), 'be'), 'null');
          return get$(get$(expect(session.getModel(post)), 'to'), 'not').eq(post);
        });
        return it('instantiates a model with attributes', function () {
          var post;
          post = session.create('post', { title: 'test' });
          return get$(expect(get$(post, 'title')), 'to').eq('test');
        });
      });
      describe('.create', function () {
        it('creates a model', function () {
          var post;
          post = session.create('post');
          get$(get$(get$(get$(expect(post), 'to'), 'not'), 'be'), 'null');
          return get$(expect(session.getModel(post)), 'to').eq(post);
        });
        return it('creates a model with attributes', function () {
          var post;
          post = session.create('post', { title: 'test' });
          return get$(expect(get$(post, 'title')), 'to').eq('test');
        });
      });
      describe('.deleteModel', function () {
        return it('deletes a model', function () {
          var post;
          post = session.merge(session.build('post', { id: 1 }));
          session.deleteModel(post);
          return get$(get$(get$(expect(get$(post, 'isDeleted')), 'to'), 'be'), 'true');
        });
      });
      describe('.add', function () {
        it('works with lazy models', function () {
          var added, post;
          post = get$(this, 'Post').create({ id: '1' });
          added = session.add(post);
          return get$(expect(get$(added, 'session')), 'to').eq(session);
        });
        it('reuses detached model', function () {
          var post;
          post = get$(this, 'Post').create({ title: 'test' });
          return get$(expect(session.add(post)), 'to').eq(post);
        });
        return it('overwrites unloaded models', function () {
          var lazy, post;
          lazy = get$(this, 'Post').create({ id: '1' });
          session.add(lazy);
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'post'
          }));
          session.add(post);
          get$(expect(session.getModel(lazy)), 'to').eq(post);
          session.add(lazy);
          return get$(expect(session.getModel(lazy)), 'to').eq(post);
        });
      });
      describe('.invalidate', function () {
        return it('causes existing model to be reloaded', function () {
          var hit, post;
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'refresh me plz'
          }));
          hit = false;
          set$(adapter, 'load', function (model) {
            get$(expect(model), 'to').eq(post);
            hit = true;
            return Ember.RSVP.resolve(model);
          });
          post.load();
          get$(get$(get$(expect(hit), 'to'), 'be'), 'false');
          session.invalidate(post);
          post.load();
          return get$(get$(get$(expect(hit), 'to'), 'be'), 'true');
        });
      });
      describe('.merge', function () {
        it('reuses detached model', function () {
          var post;
          post = get$(this, 'Post').create({
            id: '1',
            title: 'test'
          });
          return get$(expect(session.merge(post)), 'to').eq(post);
        });
        it('handles merging detached model with hasMany child already in session', function () {
          var comment, post;
          comment = session.merge(get$(this, 'Comment').create({
            id: '1',
            body: 'obscurity',
            post: get$(this, 'Post').create({ id: '2' })
          }));
          post = session.merge(get$(this, 'Post').create({
            id: '2',
            comments: []
          }));
          get$(post, 'comments').addObject(get$(this, 'Comment').create({
            id: '1',
            body: 'obscurity'
          }));
          return get$(expect(get$(get$(post, 'comments'), 'firstObject')), 'to').eq(comment);
        });
        it('handles merging detached model with belongsTo child already in session', function () {
          var comment, post;
          post = session.merge(get$(this, 'Post').create({
            id: '2',
            comments: [get$(this, 'Comment').create({ id: '1' })]
          }));
          comment = session.merge(get$(this, 'Comment').create({
            id: '1',
            body: 'obscurity',
            post: get$(this, 'Post').create({
              id: '2',
              comments: [get$(this, 'Comment').create({ id: '1' })]
            })
          }));
          return get$(expect(get$(comment, 'post')), 'to').eq(post);
        });
        it('handles merging detached model with lazy belongsTo reference', function () {
          var comment, post;
          post = session.merge(get$(this, 'Post').create({
            id: '2',
            comments: []
          }));
          comment = session.merge(get$(this, 'Comment').create({
            id: '1',
            body: 'obscurity',
            post: get$(this, 'Post').create({ id: '2' })
          }));
          get$(expect(get$(get$(post, 'comments'), 'firstObject')), 'to').eq(comment);
          return get$(get$(get$(expect(get$(post, 'isDirty')), 'to'), 'be'), 'false');
        });
        it('handles merging detached model with lazy hasMany reference', function () {
          var comment, post;
          comment = session.merge(get$(this, 'Comment').create({
            id: '1',
            body: 'obscurity',
            post: null
          }));
          post = session.merge(get$(this, 'Post').create({
            id: '2',
            comments: [get$(this, 'Comment').create({ id: '1' })]
          }));
          get$(expect(get$(comment, 'post')), 'to').eq(post);
          return get$(get$(get$(expect(get$(comment, 'isDirty')), 'to'), 'be'), 'false');
        });
        return it('reuses existing hasMany arrays', function () {
          var comments, post;
          post = session.merge(get$(this, 'Post').create({
            id: '2',
            comments: []
          }));
          comments = get$(post, 'comments');
          session.merge(get$(this, 'Post').create({
            id: '2',
            comments: [get$(this, 'Comment').create({
                id: '1',
                post: get$(this, 'Post').create({ id: '2' })
              })]
          }));
          return get$(expect(get$(comments, 'length')), 'to').eq(1);
        });
      });
      describe('.markClean', function () {
        it('makes models no longer dirty', function () {
          var post;
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          set$(post, 'title', 'dirty bastard');
          get$(get$(get$(expect(get$(post, 'isDirty')), 'to'), 'be'), 'true');
          session.markClean(post);
          return get$(get$(get$(expect(get$(post, 'isDirty')), 'to'), 'be'), 'false');
        });
        return it('works with already clean models', function () {
          var post;
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          get$(get$(get$(expect(get$(post, 'isDirty')), 'to'), 'be'), 'false');
          session.markClean(post);
          return get$(get$(get$(expect(get$(post, 'isDirty')), 'to'), 'be'), 'false');
        });
      });
      describe('.touch', function () {
        return it('makes the model dirty', function () {
          var post;
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          get$(get$(get$(expect(get$(post, 'isDirty')), 'to'), 'be'), 'false');
          session.touch(post);
          return get$(get$(get$(expect(get$(post, 'isDirty')), 'to'), 'be'), 'true');
        });
      });
      describe('.isDirty', function () {
        it('is true when models are dirty', function () {
          var post;
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          get$(get$(get$(expect(get$(session, 'isDirty')), 'to'), 'be'), 'false');
          session.touch(post);
          return get$(get$(get$(expect(get$(session, 'isDirty')), 'to'), 'be'), 'true');
        });
        return it('becomes false after successful flush', function () {
          var post;
          post = session.merge(get$(this, 'Post').create({
            id: '1',
            title: 'test'
          }));
          session.touch(post);
          get$(get$(get$(expect(get$(session, 'isDirty')), 'to'), 'be'), 'true');
          return session.flush().then(function () {
            return get$(get$(get$(expect(get$(session, 'isDirty')), 'to'), 'be'), 'false');
          });
        });
      });
      return describe('.mergeData', function () {
        return it('should merge in data', function () {
          var post;
          post = session.mergeData({
            id: '1',
            title: 'easy peazy'
          }, 'post');
          get$(expect(get$(post, 'title')), 'to').eq('easy peazy');
          return get$(expect(session.getModel(post)), 'to').eq(post);
        });
      });
    });
  });
define("epf-test/support/schemas",
  ["epf/model/model","epf/model/attribute","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    // Generated by EmberScript 0.0.14
    var postSchema;
    var get$ = Ember.get;
    var set$ = Ember.set;
    var Model = __dependency1__["default"];
    var attr = __dependency2__["default"];
    postSchema = function () {
      return set$(this, 'Post', Model.extend({ title: attr('string') }));
    };
    __exports__.postSchema = postSchema;
  });